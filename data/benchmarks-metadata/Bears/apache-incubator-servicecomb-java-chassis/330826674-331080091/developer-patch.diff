diff --git a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/api/registry/MicroserviceFactory.java b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/api/registry/MicroserviceFactory.java
index 295592d39..fad8bf998 100644
--- a/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/api/registry/MicroserviceFactory.java
+++ b/service-registry/src/main/java/org/apache/servicecomb/serviceregistry/api/registry/MicroserviceFactory.java
@@ -56,7 +56,7 @@ public class MicroserviceFactory {
     microservice.setAppId(configuration.getString(CONFIG_APPLICATION_ID_KEY, DEFAULT_APPLICATION_ID));
     microservice.setVersion(configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_VERSION_KEY,
         DEFAULT_MICROSERVICE_VERSION));
-    microservice.setDescription(configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_DESCRIPTION_KEY, ""));
+    setDescription(configuration, microservice);
     microservice.setLevel(configuration.getString(CONFIG_QUALIFIED_MICROSERVICE_ROLE_KEY, "FRONT"));
     microservice.setPaths(ConfigurePropertyUtils.getMicroservicePaths(configuration));
     Map<String, String> propertiesMap = MicroservicePropertiesLoader.INSTANCE.loadProperties(configuration);
@@ -78,6 +78,24 @@ public class MicroserviceFactory {
     return microservice;
   }
 
+  /**
+   * {@code service_description.description} is split by {@code ,},
+   * need to combine the description array to raw description.
+   */
+  private void setDescription(Configuration configuration, Microservice microservice) {
+    String[] descriptionArray = configuration.getStringArray(CONFIG_QUALIFIED_MICROSERVICE_DESCRIPTION_KEY);
+    if (null == descriptionArray || descriptionArray.length < 1) {
+      return;
+    }
+
+    StringBuilder rawDescriptionBuilder = new StringBuilder();
+    for (String desc : descriptionArray) {
+      rawDescriptionBuilder.append(desc).append(",");
+    }
+
+    microservice.setDescription(rawDescriptionBuilder.substring(0, rawDescriptionBuilder.length() - 1));
+  }
+
   private boolean allowCrossApp(Map<String, String> propertiesMap) {
     return Boolean.valueOf(propertiesMap.get(CONFIG_ALLOW_CROSS_APP_KEY));
   }
diff --git a/service-registry/src/test/java/org/apache/servicecomb/serviceregistry/api/registry/TestMicroserviceFactory.java b/service-registry/src/test/java/org/apache/servicecomb/serviceregistry/api/registry/TestMicroserviceFactory.java
index bf73ab8b6..d3f69b0ba 100644
--- a/service-registry/src/test/java/org/apache/servicecomb/serviceregistry/api/registry/TestMicroserviceFactory.java
+++ b/service-registry/src/test/java/org/apache/servicecomb/serviceregistry/api/registry/TestMicroserviceFactory.java
@@ -17,15 +17,18 @@
 
 package org.apache.servicecomb.serviceregistry.api.registry;
 
+import static org.apache.servicecomb.foundation.common.base.ServiceCombConstants.CONFIG_QUALIFIED_MICROSERVICE_DESCRIPTION_KEY;
 import static org.apache.servicecomb.serviceregistry.definition.DefinitionConst.CONFIG_ALLOW_CROSS_APP_KEY;
 
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.commons.configuration.Configuration;
 import org.apache.servicecomb.config.archaius.sources.MicroserviceConfigLoader;
 import org.apache.servicecomb.serviceregistry.definition.MicroserviceDefinition;
 import org.junit.Assert;
 import org.junit.Test;
+import org.mockito.Mockito;
 
 import mockit.Deencapsulation;
 
@@ -59,4 +62,67 @@ public class TestMicroserviceFactory {
 
     Assert.assertEquals(microserviceName, microservice.getServiceName());
   }
+
+  @Test
+  public void testSetDescription() {
+    Microservice microservice = new Microservice();
+    MicroserviceFactory factory = new MicroserviceFactory();
+    Configuration configuration = Mockito.mock(Configuration.class);
+
+    Mockito.when(configuration.getStringArray(CONFIG_QUALIFIED_MICROSERVICE_DESCRIPTION_KEY))
+        .thenReturn(new String[] {"test1", "test2"});
+
+    Deencapsulation.invoke(factory, "setDescription", configuration, microservice);
+
+    Assert.assertEquals("test1,test2", microservice.getDescription());
+  }
+
+  @Test
+  public void testSetDescriptionOnNullDescription() {
+    Microservice microservice = new Microservice();
+    MicroserviceFactory factory = new MicroserviceFactory();
+    Configuration configuration = Mockito.mock(Configuration.class);
+
+    Mockito.when(configuration.getStringArray(CONFIG_QUALIFIED_MICROSERVICE_DESCRIPTION_KEY))
+        .thenReturn(null);
+
+    Deencapsulation.invoke(factory, "setDescription", configuration, microservice);
+
+    Assert.assertNull(microservice.getDescription());
+
+    Mockito.when(configuration.getStringArray(CONFIG_QUALIFIED_MICROSERVICE_DESCRIPTION_KEY))
+        .thenReturn(new String[] {});
+
+    Deencapsulation.invoke(factory, "setDescription", configuration, microservice);
+
+    Assert.assertNull(microservice.getDescription());
+  }
+
+  @Test
+  public void testSetDescriptionOnEmptyDescription() {
+    Microservice microservice = new Microservice();
+    MicroserviceFactory factory = new MicroserviceFactory();
+    Configuration configuration = Mockito.mock(Configuration.class);
+
+    Mockito.when(configuration.getStringArray(CONFIG_QUALIFIED_MICROSERVICE_DESCRIPTION_KEY))
+        .thenReturn(new String[] {"", ""});
+
+    Deencapsulation.invoke(factory, "setDescription", configuration, microservice);
+
+    Assert.assertEquals(",", microservice.getDescription());
+  }
+
+  @Test
+  public void testSetDescriptionOnBlankDescription() {
+    Microservice microservice = new Microservice();
+    MicroserviceFactory factory = new MicroserviceFactory();
+    Configuration configuration = Mockito.mock(Configuration.class);
+
+    Mockito.when(configuration.getStringArray(CONFIG_QUALIFIED_MICROSERVICE_DESCRIPTION_KEY))
+        .thenReturn(new String[] {" ", " "});
+
+    Deencapsulation.invoke(factory, "setDescription", configuration, microservice);
+
+    Assert.assertEquals(" , ", microservice.getDescription());
+  }
 }
