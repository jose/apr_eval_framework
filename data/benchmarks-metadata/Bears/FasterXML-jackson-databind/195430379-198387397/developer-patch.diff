diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
index 0e2b87490..d0ebabafb 100644
--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java
@@ -373,6 +373,10 @@ public class BeanDeserializer
         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {
             String propName = p.getCurrentName();
             p.nextToken(); // to point to value
+            // Object Id property?
+            if (buffer.readIdProperty(propName)) {
+                continue;
+            }
             // creator property?
             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);
             if (creatorProp != null) {
@@ -405,10 +409,6 @@ public class BeanDeserializer
                 }
                 continue;
             }
-            // Object Id property?
-            if (buffer.readIdProperty(propName)) {
-                continue;
-            }
             // regular property? needs buffering
             SettableBeanProperty prop = _beanProperties.find(propName);
             if (prop != null) {
diff --git a/src/test/java/com/fasterxml/jackson/databind/creators/CreatorWithObjectIdTest.java b/src/test/java/com/fasterxml/jackson/databind/creators/CreatorWithObjectIdTest.java
new file mode 100644
index 000000000..01c13a0b6
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/databind/creators/CreatorWithObjectIdTest.java
@@ -0,0 +1,50 @@
+package com.fasterxml.jackson.databind.creators;
+
+import java.beans.ConstructorProperties;
+
+import com.fasterxml.jackson.annotation.JsonIdentityInfo;
+import com.fasterxml.jackson.annotation.ObjectIdGenerators;
+import com.fasterxml.jackson.databind.*;
+
+// for [databind#1367]
+public class CreatorWithObjectIdTest
+    extends BaseMapTest
+{
+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
+//            resolver = SimpleObjectIdResolver.class)
+    public static class A {
+        String id;
+        String name;
+
+        public A() { }
+
+        @ConstructorProperties({"id", "name"})
+        public A(String id, String name) {
+            this.id = id;
+            this.name = name;
+        }
+
+        public String getId() {
+            return id;
+        }
+        public void setId(String id) {
+            this.id = id;
+        }
+        public String getName() {
+            return name;
+        }
+        public void setName(String name) {
+            this.name = name;
+        }
+    }
+
+    public void testObjectIdWithCreator() throws Exception
+    {
+        A a = new A("123", "A");
+
+        ObjectMapper om = new ObjectMapper();
+        String json = om.writeValueAsString(a);
+        A deser = om.readValue(json, A.class);
+        assertEquals(a.name, deser.name);
+    }
+}
