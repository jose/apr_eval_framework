diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
index d4a624a0b..19f52c6c6 100644
--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java
@@ -761,6 +761,9 @@ public class JacksonAnnotationIntrospector
                         type = tf.constructGeneralizedType(type, serClass);
                     } else if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well
                         type = tf.constructSpecializedType(type, serClass);
+                    } else if (_primitiveAndWrapper(currRaw, serClass)) {
+                        // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements
+                        type = type.withStaticTyping();
                     } else {
                         throw new JsonMappingException(null,
                                 String.format("Can not refine serialization type %s into %s; types not related",
@@ -793,6 +796,9 @@ public class JacksonAnnotationIntrospector
                             keyType = tf.constructGeneralizedType(keyType, keyClass);
                         } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well
                             keyType = tf.constructSpecializedType(keyType, keyClass);
+                        } else if (_primitiveAndWrapper(currRaw, keyClass)) {
+                            // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements
+                            keyType = keyType.withStaticTyping();
                         } else {
                             throw new JsonMappingException(null,
                                     String.format("Can not refine serialization key type %s into %s; types not related",
@@ -826,6 +832,9 @@ public class JacksonAnnotationIntrospector
                            contentType = tf.constructGeneralizedType(contentType, contentClass);
                        } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well
                            contentType = tf.constructSpecializedType(contentType, contentClass);
+                       } else if (_primitiveAndWrapper(currRaw, contentClass)) {
+                           // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements
+                           contentType = contentType.withStaticTyping();
                        } else {
                            throw new JsonMappingException(null,
                                    String.format("Can not refine serialization content type %s into %s; types not related",
@@ -1113,7 +1122,8 @@ public class JacksonAnnotationIntrospector
         
         // Ok: start by refining the main type itself; common to all types
         final Class<?> valueClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.as());
-        if ((valueClass != null) && !type.hasRawClass(valueClass)) {
+        if ((valueClass != null) && !type.hasRawClass(valueClass)
+                && !_primitiveAndWrapper(type, valueClass)) {
             try {
                 type = tf.constructSpecializedType(type, valueClass);
             } catch (IllegalArgumentException iae) {
@@ -1129,7 +1139,8 @@ public class JacksonAnnotationIntrospector
         if (type.isMapLikeType()) {
             JavaType keyType = type.getKeyType();
             final Class<?> keyClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.keyAs());
-            if (keyClass != null) {
+            if ((keyClass != null)
+                    && !_primitiveAndWrapper(keyType, keyClass)) {
                 try {
                     keyType = tf.constructSpecializedType(keyType, keyClass);
                     type = ((MapLikeType) type).withKeyType(keyType);
@@ -1145,7 +1156,8 @@ public class JacksonAnnotationIntrospector
         if (contentType != null) { // collection[like], map[like], array, reference
             // And then value types for all containers:
             final Class<?> contentClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.contentAs());
-            if (contentClass != null) {
+            if ((contentClass != null)
+                    && !_primitiveAndWrapper(contentType, contentClass)) {
                 try {
                     contentType = tf.constructSpecializedType(contentType, contentClass);
                     type = type.withContentType(contentType);
@@ -1451,9 +1463,25 @@ public class JacksonAnnotationIntrospector
         return StdTypeResolverBuilder.noTypeInfoBuilder();
     }
 
-    /*
-    /**********************************************************
-    /* Helper classes
-    /**********************************************************
-     */
+    private boolean _primitiveAndWrapper(Class<?> baseType, Class<?> refinement)
+    {
+        if (baseType.isPrimitive()) {
+            return baseType == ClassUtil.primitiveType(refinement);
+        }
+        if (refinement.isPrimitive()) {
+            return refinement == ClassUtil.primitiveType(baseType);
+        }
+        return false;
+    }
+
+    private boolean _primitiveAndWrapper(JavaType baseType, Class<?> refinement)
+    {
+        if (baseType.isPrimitive()) {
+            return baseType.hasRawClass(ClassUtil.primitiveType(refinement));
+        }
+        if (refinement.isPrimitive()) {
+            return refinement == ClassUtil.primitiveType(baseType.getRawClass());
+        }
+        return false;
+    }
 }
diff --git a/src/test/java/com/fasterxml/jackson/databind/introspect/TypeCoercion1592Test.java b/src/test/java/com/fasterxml/jackson/databind/introspect/TypeCoercion1592Test.java
new file mode 100644
index 000000000..c1feb65bb
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TypeCoercion1592Test.java
@@ -0,0 +1,35 @@
+package com.fasterxml.jackson.databind.introspect;
+
+import com.fasterxml.jackson.databind.*;
+
+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
+import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+
+// [databind#1592]: allow "coercion" between primitive/wrapper (mostly just ignoring)
+public class TypeCoercion1592Test extends BaseMapTest
+{
+    static class Bean1592
+    {
+        @JsonSerialize(as=Integer.class)
+        public int i;
+
+        @JsonDeserialize(as=Long.class)
+        public long l;
+    }
+
+    /*
+    /**********************************************************
+    /* Test methods
+    /**********************************************************
+     */
+
+    private final ObjectMapper MAPPER = new ObjectMapper();
+
+    public void testTypeCoercion1592() throws Exception
+    {
+        // first, serialize
+        MAPPER.writeValueAsString(new Bean1592());
+        Bean1592 result = MAPPER.readValue("{}", Bean1592.class);
+        assertNotNull(result);
+    }
+}
