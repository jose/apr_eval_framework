diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
index 89f51b54a..4307709cf 100644
--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java
@@ -1155,7 +1155,7 @@ public abstract class SerializerProvider
             String msg, Object... msgArgs) throws JsonMappingException {
         String beanDesc = "N/A";
         if (bean != null) {
-            beanDesc = _desc(bean.getType().getGenericSignature());
+            beanDesc = ClassUtil.nameOf(bean.getBeanClass());
         }
         msg = String.format("Invalid type definition for type %s: %s",
                 beanDesc, _format(msg, msgArgs));
@@ -1178,7 +1178,7 @@ public abstract class SerializerProvider
         }
         String beanDesc = "N/A";
         if (bean != null) {
-            beanDesc = _desc(bean.getType().getGenericSignature());
+            beanDesc = ClassUtil.nameOf(bean.getBeanClass());
         }
         message = String.format("Invalid definition for property %s (of type %s): %s",
                 propName, beanDesc, message);
diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java
index 95613e12d..c89d380f4 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java
@@ -37,7 +37,7 @@ public class BeanSerializerBuilder
     /**
      * Bean properties, in order of serialization
      */
-    protected List<BeanPropertyWriter> _properties;
+    protected List<BeanPropertyWriter> _properties = Collections.emptyList();
 
     /**
      * Optional array of filtered property writers; if null, no
@@ -66,13 +66,13 @@ public class BeanSerializerBuilder
      * type, if any.
      */
     protected ObjectIdWriter _objectIdWriter;
-    
+
     /*
     /**********************************************************
     /* Construction and setter methods
     /**********************************************************
      */
-    
+
     public BeanSerializerBuilder(BeanDescription beanDesc) {
         _beanDesc = beanDesc;
     }
@@ -105,10 +105,22 @@ public class BeanSerializerBuilder
         _properties = properties;
     }
 
+    /**
+     * @param properties Number and order of properties here MUST match that
+     *    of "regular" properties set earlier using {@link #setProperties(List)}; if not,
+     *    an {@link IllegalArgumentException} will be thrown
+     */
     public void setFilteredProperties(BeanPropertyWriter[] properties) {
+        if (properties != null) {
+            if (properties.length != _properties.size()) { // as per [databind#1612]
+                throw new IllegalArgumentException(String.format(
+                        "Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)",
+                        properties.length, _properties.size()));
+            }
+        }
         _filteredProperties = properties;
     }
-    
+
     public void setAnyGetter(AnyGetterWriter anyGetter) {
         _anyGetter = anyGetter;
     }
@@ -185,6 +197,14 @@ public class BeanSerializerBuilder
                 }
             }
         }
+        // 27-Apr-2017, tatu: Verify that filtered-properties settings are compatible
+        if (_filteredProperties != null) {
+            if (_filteredProperties.length != _properties.size()) {
+                throw new IllegalStateException(String.format(
+"Mismatch between `properties` size (%d), `filteredProperties` (%s): should have as many (or `null` for latter)",
+_properties.size(), _filteredProperties.length));
+            }
+        }
         if (_anyGetter != null) {
             _anyGetter.fixAccess(_config);
         }
diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
index f0fa9c5c8..50436bb46 100644
--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java
@@ -520,7 +520,13 @@ public class BeanSerializerFactory
             }
         }
 
-        JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();
+        JsonSerializer<Object> ser = null;
+        try {
+            ser = (JsonSerializer<Object>) builder.build();
+        } catch (RuntimeException e) {
+            prov.reportBadTypeDefinition(beanDesc, "Failed to construct BeanSerializer for %s: (%s) %s",
+                    beanDesc.getType(), e.getClass().getName(), e.getMessage());
+        }
         if (ser == null) {
             // If we get this far, there were no properties found, so no regular BeanSerializer
             // would be constructed. But, couple of exceptions.
diff --git a/src/test/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier1612Test.java b/src/test/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier1612Test.java
new file mode 100644
index 000000000..2be2594f8
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier1612Test.java
@@ -0,0 +1,66 @@
+package com.fasterxml.jackson.databind.ser;
+
+import java.util.*;
+
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
+
+import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
+import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
+
+public class BeanSerializerModifier1612Test extends BaseMapTest
+{
+    @JsonPropertyOrder({ "a", "b", "c" })
+    static class Bean1612 {
+        public Integer a;
+        public Integer b;
+        public Double c;
+
+        public Bean1612(Integer a, Integer b, Double c) {
+            this.a = a;
+            this.b = b;
+            this.c = c;
+        }
+    }
+
+    static class Modifier1612 extends BeanSerializerModifier {
+        @Override
+        public BeanSerializerBuilder updateBuilder(SerializationConfig config, BeanDescription beanDesc,
+                BeanSerializerBuilder builder) {
+            List<BeanPropertyWriter> filtered = new ArrayList<BeanPropertyWriter>(2);
+            List<BeanPropertyWriter> properties = builder.getProperties();
+            //Make the filtered properties list bigger
+            builder.setFilteredProperties(new BeanPropertyWriter[] {properties.get(0), properties.get(1), properties.get(2)});
+
+            //The props will be shorter
+            filtered.add(properties.get(1));
+            filtered.add(properties.get(2));
+            builder.setProperties(filtered);
+            return builder;
+        }
+    }
+
+    /*
+    /**********************************************************
+    /* Construction and setter methods
+    /**********************************************************
+     */
+
+    public void testIssue1612() throws Exception
+    {
+        SimpleModule mod = new SimpleModule();
+        mod.setSerializerModifier(new Modifier1612());
+        ObjectMapper objectMapper = new ObjectMapper()
+                .registerModule(mod);
+        try {
+            objectMapper.writeValueAsString(new Bean1612(0, 1, 2d));
+            fail("Should not pass");
+        } catch (InvalidDefinitionException e) {
+            verifyException(e, "Failed to construct BeanSerializer");
+            verifyException(e, Bean1612.class.getName());
+        }
+    }
+}
diff --git a/src/test/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifierTest.java b/src/test/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifierTest.java
new file mode 100644
index 000000000..6f0e571d2
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifierTest.java
@@ -0,0 +1,362 @@
+package com.fasterxml.jackson.databind.ser;
+
+import java.io.IOException;
+import java.util.*;
+
+import com.fasterxml.jackson.annotation.*;
+import com.fasterxml.jackson.core.*;
+import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.introspect.AnnotatedField;
+import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
+import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
+import com.fasterxml.jackson.databind.ser.BeanSerializer;
+import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
+import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
+import com.fasterxml.jackson.databind.ser.std.StdSerializer;
+import com.fasterxml.jackson.databind.type.ArrayType;
+import com.fasterxml.jackson.databind.type.CollectionType;
+import com.fasterxml.jackson.databind.type.MapType;
+
+/**
+ * Unit tests for verifying that it is possible to configure
+ * construction of {@link BeanSerializer} instances.
+ */
+@SuppressWarnings("serial")
+public class BeanSerializerModifierTest extends BaseMapTest
+{
+    static class SerializerModifierModule extends SimpleModule
+    {
+        protected BeanSerializerModifier modifier;
+        
+        public SerializerModifierModule(BeanSerializerModifier modifier)
+        {
+            super("test", Version.unknownVersion());
+            this.modifier = modifier;
+        }
+        
+        @Override
+        public void setupModule(SetupContext context)
+        {
+            super.setupModule(context);
+            if (modifier != null) {
+                context.addBeanSerializerModifier(modifier);
+            }
+        }
+    }
+
+    @JsonPropertyOrder({"b", "a"})
+    static class Bean {
+        public String b = "b";
+        public String a = "a";
+    }
+
+    static class RemovingModifier extends BeanSerializerModifier
+    {
+        private final String _removedProperty;
+        
+        public RemovingModifier(String remove) { _removedProperty = remove; }
+        
+        @Override
+        public List<BeanPropertyWriter> changeProperties(SerializationConfig config, BeanDescription beanDesc,
+                List<BeanPropertyWriter> beanProperties)
+        {
+            Iterator<BeanPropertyWriter> it = beanProperties.iterator();
+            while (it.hasNext()) {
+                BeanPropertyWriter bpw = it.next();
+                if (bpw.getName().equals(_removedProperty)) {
+                    it.remove();
+                }
+            }
+            return beanProperties;
+        }
+    }
+    
+    static class ReorderingModifier extends BeanSerializerModifier
+    {
+        @Override
+        public List<BeanPropertyWriter> orderProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)
+        {
+            TreeMap<String,BeanPropertyWriter> props = new TreeMap<String,BeanPropertyWriter>();
+            for (BeanPropertyWriter bpw : beanProperties) {
+                props.put(bpw.getName(), bpw);
+            }
+            return new ArrayList<BeanPropertyWriter>(props.values());
+        }
+    }
+
+    static class ReplacingModifier extends BeanSerializerModifier
+    {
+        private final JsonSerializer<?> _serializer;
+        
+        public ReplacingModifier(JsonSerializer<?> s) { _serializer = s; }
+        
+        @Override
+        public JsonSerializer<?> modifySerializer(SerializationConfig config, BeanDescription beanDesc,
+                JsonSerializer<?> serializer) {
+            return _serializer;
+        }
+    }
+
+    static class BuilderModifier extends BeanSerializerModifier
+    {
+        private final JsonSerializer<?> _serializer;
+        
+        public BuilderModifier(JsonSerializer<?> ser) {
+            _serializer = ser;
+        }
+        
+        @Override
+        public BeanSerializerBuilder updateBuilder(SerializationConfig config,
+                BeanDescription beanDesc, BeanSerializerBuilder builder) {
+            return new BogusSerializerBuilder(builder, _serializer);
+        }
+    }
+
+    static class BogusSerializerBuilder extends BeanSerializerBuilder
+    {
+        private final JsonSerializer<?> _serializer;
+        
+        public BogusSerializerBuilder(BeanSerializerBuilder src,
+                JsonSerializer<?> ser) {
+            super(src);
+            _serializer = ser;
+        }
+
+        @Override
+        public JsonSerializer<?> build() {
+            return _serializer;
+        }
+    }
+    
+    static class BogusBeanSerializer extends JsonSerializer<Object>
+    {
+        private final int _value;
+        
+        public BogusBeanSerializer(int v) { _value = v; }
+        
+        @Override
+        public void serialize(Object value, JsonGenerator jgen,
+                SerializerProvider provider) throws IOException {
+            jgen.writeNumber(_value);
+        }
+    }
+
+    static class EmptyBean {
+        @JsonIgnore
+        public String name = "foo";
+    }
+
+    static class EmptyBeanModifier extends BeanSerializerModifier
+    {
+        @Override
+        public List<BeanPropertyWriter> changeProperties(SerializationConfig config,
+                BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)
+        {
+            JavaType strType = config.constructType(String.class);
+            // we need a valid BeanPropertyDefinition; this will do (just need name to match)
+            POJOPropertyBuilder prop = new POJOPropertyBuilder(config, null, true, new PropertyName("bogus"));
+            try {
+                AnnotatedField f = new AnnotatedField(null, EmptyBean.class.getDeclaredField("name"), null);
+                beanProperties.add(new BeanPropertyWriter(prop, f, null,
+                        strType,
+                        null, null, strType,
+                        false, null,
+                        null));
+            } catch (NoSuchFieldException e) {
+                throw new IllegalStateException(e.getMessage());
+            }
+            return beanProperties;
+        }
+    }
+
+    // [Issue#539]: use post-modifier
+    static class EmptyBeanModifier539 extends BeanSerializerModifier
+    {
+        @Override
+        public List<BeanPropertyWriter> changeProperties(SerializationConfig config,
+                BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)
+        {
+            return beanProperties;
+        }
+        
+        @Override
+        public JsonSerializer<?> modifySerializer(SerializationConfig config,
+                BeanDescription beanDesc, JsonSerializer<?> serializer) {
+            return new BogusBeanSerializer(42);
+        }
+    }
+    // [databind#120], arrays, collections, maps
+    
+    static class ArraySerializerModifier extends BeanSerializerModifier {
+        @Override
+        public JsonSerializer<?> modifyArraySerializer(SerializationConfig config,
+                ArrayType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {
+            return new StdSerializer<Object>(Object.class) {
+                @Override public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+                    jgen.writeNumber(123);
+                }
+            };
+        }
+    }
+
+    static class CollectionSerializerModifier extends BeanSerializerModifier {
+        @Override
+        public JsonSerializer<?> modifyCollectionSerializer(SerializationConfig config,
+                CollectionType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {
+            return new StdSerializer<Object>(Object.class) {
+                @Override public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+                    jgen.writeNumber(123);
+                }
+            };
+        }
+    }
+
+    static class MapSerializerModifier extends BeanSerializerModifier {
+        @Override
+        public JsonSerializer<?> modifyMapSerializer(SerializationConfig config,
+                MapType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {
+            return new StdSerializer<Object>(Object.class) {
+                @Override public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+                    jgen.writeNumber(123);
+                }
+            };
+        }
+    }
+
+    static class EnumSerializerModifier extends BeanSerializerModifier {
+        @Override
+        public JsonSerializer<?> modifyEnumSerializer(SerializationConfig config,
+                JavaType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {
+            return new StdSerializer<Object>(Object.class) {
+                @Override public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+                    jgen.writeNumber(123);
+                }
+            };
+        }
+    }
+
+    static class KeySerializerModifier extends BeanSerializerModifier {
+        @Override
+        public JsonSerializer<?> modifyKeySerializer(SerializationConfig config,
+                JavaType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {
+            return new StdSerializer<Object>(Object.class) {
+                @Override public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
+                    jgen.writeFieldName("foo");
+                }
+            };
+        }
+    }
+
+    /*
+    /********************************************************
+    /* Unit tests: success
+    /********************************************************
+     */
+
+    public void testPropertyRemoval() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SerializerModifierModule(new RemovingModifier("a")));
+        Bean bean = new Bean();
+        assertEquals("{\"b\":\"b\"}", mapper.writeValueAsString(bean));
+    }
+
+    public void testPropertyReorder() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SerializerModifierModule(new ReorderingModifier()));
+        Bean bean = new Bean();
+        assertEquals("{\"a\":\"a\",\"b\":\"b\"}", mapper.writeValueAsString(bean));
+    }
+
+    public void testBuilderReplacement() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SerializerModifierModule(new BuilderModifier(new BogusBeanSerializer(17))));
+        Bean bean = new Bean();
+        assertEquals("17", mapper.writeValueAsString(bean));
+    }    
+    public void testSerializerReplacement() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SerializerModifierModule(new ReplacingModifier(new BogusBeanSerializer(123))));
+        Bean bean = new Bean();
+        assertEquals("123", mapper.writeValueAsString(bean));
+    }
+
+    // for [JACKSON-670]
+    public void testEmptyBean() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SimpleModule("test", Version.unknownVersion()) {
+            @Override
+            public void setupModule(SetupContext context)
+            {
+                super.setupModule(context);
+                context.addBeanSerializerModifier(new EmptyBeanModifier());
+            }
+        });
+        String json = mapper.writeValueAsString(new EmptyBean());
+        assertEquals("{\"bogus\":\"foo\"}", json);
+    }
+
+    public void testEmptyBean539() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SimpleModule("test", Version.unknownVersion()) {
+            @Override
+            public void setupModule(SetupContext context)
+            {
+                super.setupModule(context);
+                context.addBeanSerializerModifier(new EmptyBeanModifier539());
+            }
+        });
+        String json = mapper.writeValueAsString(new EmptyBean());
+        assertEquals("42", json);
+    }
+    
+    // [databind#121]
+
+    public void testModifyArraySerializer() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SimpleModule("test")
+            .setSerializerModifier(new ArraySerializerModifier()));
+        assertEquals("123", mapper.writeValueAsString(new Integer[] { 1, 2 }));
+    }
+
+    public void testModifyCollectionSerializer() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SimpleModule("test")
+            .setSerializerModifier(new CollectionSerializerModifier()));
+        assertEquals("123", mapper.writeValueAsString(new ArrayList<Integer>()));
+    }
+
+    public void testModifyMapSerializer() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SimpleModule("test")
+            .setSerializerModifier(new MapSerializerModifier()));
+        assertEquals("123", mapper.writeValueAsString(new HashMap<String,String>()));
+    }
+
+    public void testModifyEnumSerializer() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SimpleModule("test")
+            .setSerializerModifier(new EnumSerializerModifier()));
+        assertEquals("123", mapper.writeValueAsString(ABC.C));
+    }
+
+    public void testModifyKeySerializer() throws Exception
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.registerModule(new SimpleModule("test")
+            .setSerializerModifier(new KeySerializerModifier()));
+        Map<String,Integer> map = new HashMap<String,Integer>();
+        map.put("x", 3);
+        assertEquals("{\"foo\":3}", mapper.writeValueAsString(map));
+    }
+}
