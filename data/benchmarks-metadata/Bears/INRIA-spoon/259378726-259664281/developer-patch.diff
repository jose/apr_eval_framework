diff --git a/src/main/java/spoon/support/compiler/jdt/PositionBuilder.java b/src/main/java/spoon/support/compiler/jdt/PositionBuilder.java
index 573a8c26e..94735e814 100644
--- a/src/main/java/spoon/support/compiler/jdt/PositionBuilder.java
+++ b/src/main/java/spoon/support/compiler/jdt/PositionBuilder.java
@@ -16,16 +16,20 @@
  */
 package spoon.support.compiler.jdt;
 
+import org.eclipse.jdt.internal.compiler.CompilationResult;
 import org.eclipse.jdt.internal.compiler.ast.ASTNode;
 import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.AbstractVariableDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.Annotation;
+import org.eclipse.jdt.internal.compiler.ast.AnnotationMethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.Expression;
 import org.eclipse.jdt.internal.compiler.ast.Javadoc;
 import org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;
 import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;
 
 import org.eclipse.jdt.internal.compiler.ast.TypeParameter;
+
+import spoon.SpoonException;
 import spoon.reflect.code.CtStatementList;
 import spoon.reflect.cu.CompilationUnit;
 import spoon.reflect.cu.SourcePosition;
@@ -54,13 +58,26 @@ public class PositionBuilder {
 	SourcePosition buildPositionCtElement(CtElement e, ASTNode node) {
 		CoreFactory cf = this.jdtTreeBuilder.getFactory().Core();
 		CompilationUnit cu = this.jdtTreeBuilder.getFactory().CompilationUnit().create(new String(this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.getFileName()));
-		int[] lineSeparatorPositions = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions;
+		CompilationResult cr = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult;
+		int[] lineSeparatorPositions = cr.lineSeparatorPositions;
+		char[] contents = cr.compilationUnit.getContents();
+
 
 		int sourceStart = node.sourceStart;
 		int sourceEnd = node.sourceEnd;
-		if ((node instanceof Expression)) {
-			if (((Expression) node).statementEnd > 0) {
-				sourceEnd = ((Expression) node).statementEnd;
+		if ((node instanceof Annotation)) {
+			Annotation ann = (Annotation) node;
+			int declEnd = ann.declarationSourceEnd;
+
+			if (declEnd > 0) {
+				sourceEnd = declEnd;
+			}
+		} else if ((node instanceof Expression)) {
+			Expression expression = (Expression) node;
+			int statementEnd = expression.statementEnd;
+
+			if (statementEnd > 0) {
+				sourceEnd = statementEnd;
 			}
 		}
 
@@ -110,14 +127,18 @@ public class PositionBuilder {
 			Annotation[] annotations = typeDeclaration.annotations;
 			if (annotations != null && annotations.length > 0) {
 				if (annotations[0].sourceStart() == declarationSourceStart) {
-					modifiersSourceStart = annotations[annotations.length - 1].sourceEnd() + 2;
+					modifiersSourceStart = findNextNonWhitespace(contents, annotations[annotations.length - 1].declarationSourceEnd + 1);
 				}
 			}
 			if (modifiersSourceStart == 0) {
 				modifiersSourceStart = declarationSourceStart;
 			}
-			// the position the name minus the size of "class" minus at least 2 spaces
-			int modifiersSourceEnd = sourceStart - 8;
+			//look for start of first keyword before the type keyword e.g. "class". `sourceStart` points at first char of type name
+			int modifiersSourceEnd = findPrevNonWhitespace(contents, findPrevWhitespace(contents, findPrevNonWhitespace(contents, sourceStart - 1)));
+			if (modifiersSourceEnd < modifiersSourceStart) {
+				//there is no modifier
+				modifiersSourceEnd = modifiersSourceStart - 1;
+			}
 
 			return cf.createBodyHolderSourcePosition(cu, sourceStart, sourceEnd,
 					modifiersSourceStart, modifiersSourceEnd,
@@ -135,6 +156,13 @@ public class PositionBuilder {
 			if (modifiersSourceStart == 0) {
 				modifiersSourceStart = declarationSourceStart;
 			}
+
+			if (node instanceof AnnotationMethodDeclaration && bodyStart == bodyEnd) {
+				//The ";" at the end of annotation method declaration is not part of body
+				//let it behave same like in abstract MethodDeclaration
+				bodyEnd--;
+			}
+
 			Javadoc javadoc = methodDeclaration.javadoc;
 			if (javadoc != null && javadoc.sourceEnd() > declarationSourceStart) {
 				modifiersSourceStart = javadoc.sourceEnd() + 1;
@@ -170,24 +198,82 @@ public class PositionBuilder {
 				if (bodyStart == 0) {
 					return SourcePosition.NOPOSITION;
 				} else {
+					if (bodyStart < bodyEnd) {
+						//include brackets if they are there
+						if (contents[bodyStart - 1] == '{') {
+							bodyStart--;
+							if (contents[bodyEnd + 1] == '}') {
+								bodyEnd++;
+							} else {
+								throw new SpoonException("Missing body end in\n" + new String(contents, sourceStart, sourceEnd - sourceStart));
+							}
+						}
+					}
 					return cf.createBodyHolderSourcePosition(cu,
 							sourceStart, sourceEnd,
 							modifiersSourceStart, modifiersSourceEnd,
 							declarationSourceStart, declarationSourceEnd,
-							bodyStart - 1, bodyEnd + 1,
+							bodyStart, bodyEnd,
 							lineSeparatorPositions);
 				}
 			}
 		}
-		if ((node instanceof Expression)) {
-			Expression expression = (Expression) node;
-			int statementEnd = expression.statementEnd;
 
-			if (statementEnd > 0) {
-				sourceEnd = statementEnd;
+		return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);
+	}
+
+	/**
+	 * @return index of first non whitespace char, searching forward. Can return off if it is non whitespace.
+	 */
+	private int findNextNonWhitespace(char[] content, int off) {
+		while (off >= 0) {
+			char c = content[off];
+			if (Character.isWhitespace(c) == false) {
+				return off;
 			}
+			off++;
 		}
+		return -1;
+	}
 
-		return cf.createSourcePosition(cu, sourceStart, sourceEnd, lineSeparatorPositions);
+	/**
+	 * @return index of first whitespace char, searching forward. Can return off if it is whitespace.
+	 */
+	private int findNextWhitespace(char[] content, int off) {
+		while (off >= 0) {
+			char c = content[off];
+			if (Character.isWhitespace(c)) {
+				return off;
+			}
+			off++;
+		}
+		return -1;
+	}
+	/**
+	 * @return index of first non whitespace char, searching backward. Can return off if it is non whitespace.
+	 */
+	private int findPrevNonWhitespace(char[] content, int off) {
+		while (off >= 0) {
+			char c = content[off];
+			if (Character.isWhitespace(c) == false) {
+				return off;
+			}
+			off--;
+		}
+		return -1;
+	}
+
+	/**
+	 * @return index of first whitespace char, searching backward. Can return off if it is whitespace.
+	 */
+	private int findPrevWhitespace(char[] content, int off) {
+		while (off >= 0) {
+			char c = content[off];
+			if (Character.isWhitespace(c)) {
+				return off;
+			}
+			off--;
+		}
+		return -1;
 	}
 }
diff --git a/src/test/java/spoon/test/position/PositionTest.java b/src/test/java/spoon/test/position/PositionTest.java
index 5d85074ab..b701171c6 100644
--- a/src/test/java/spoon/test/position/PositionTest.java
+++ b/src/test/java/spoon/test/position/PositionTest.java
@@ -16,16 +16,22 @@ import spoon.reflect.declaration.CtMethod;
 import spoon.reflect.declaration.CtType;
 import spoon.reflect.factory.Factory;
 import spoon.test.position.testclasses.Foo;
+import spoon.test.position.testclasses.FooAbstractMethod;
+import spoon.test.position.testclasses.FooAnnotation;
 import spoon.test.position.testclasses.FooClazz;
 import spoon.test.position.testclasses.FooClazz2;
 import spoon.test.position.testclasses.FooField;
 import spoon.test.position.testclasses.FooGeneric;
+import spoon.test.position.testclasses.FooInterface;
 import spoon.test.position.testclasses.FooMethod;
 import spoon.test.position.testclasses.FooStatement;
 
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.IOException;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.nio.file.Paths;
@@ -66,6 +72,82 @@ public class PositionTest {
 		assertEquals("FooClazz", contentAtPosition(classContent, position.getNameStart(), position.getNameEnd()));
 		assertEquals("public", contentAtPosition(classContent, position.getModifierSourceStart(), position.getModifierSourceEnd()));
 	}
+	
+	@Test
+	public void testPositionInterface() throws Exception {
+		final Factory build = build(new File("src/test/java/spoon/test/position/testclasses/"));
+		final CtType<FooInterface> foo = build.Type().get(FooInterface.class);
+		String classContent = getClassContent(foo);
+
+		BodyHolderSourcePosition position = (BodyHolderSourcePosition) foo.getPosition();
+
+		assertEquals(7, position.getLine());
+		assertEquals(9, position.getEndLine());
+
+		assertEquals(77, position.getSourceStart());
+		assertEquals(152, position.getSourceEnd());
+		assertEquals("@Deprecated\n"
+				+ "@Resource(description=\"fake\")\n"
+				+ "public interface FooInterface {\n"
+				+ "\n"
+				+ "}", contentAtPosition(classContent, position));
+
+		assertEquals("{\n\n}", contentAtPosition(classContent, position.getBodyStart(), position.getBodyEnd()));
+
+		assertEquals("FooInterface", contentAtPosition(classContent, position.getNameStart(), position.getNameEnd()));
+		assertEquals("public", contentAtPosition(classContent, position.getModifierSourceStart(), position.getModifierSourceEnd()));
+		
+		{
+			SourcePosition annPosition = foo.getAnnotations().get(0).getPosition();
+			assertEquals("@Deprecated", contentAtPosition(classContent, annPosition.getSourceStart(), annPosition.getSourceEnd()));
+		}
+		{
+			SourcePosition annPosition = foo.getAnnotations().get(1).getPosition();
+			assertEquals("@Resource(description=\"fake\")", contentAtPosition(classContent, annPosition.getSourceStart(), annPosition.getSourceEnd()));
+		}
+	}
+
+	@Test
+	public void testPositionAnnotation() throws Exception {
+		final Factory build = build(new File("src/test/java/spoon/test/position/testclasses/"));
+		final CtType<FooAnnotation> foo = build.Type().get(FooAnnotation.class);
+		String classContent = getClassContent(foo);
+
+		BodyHolderSourcePosition position = (BodyHolderSourcePosition) foo.getPosition();
+
+		assertEquals(9, position.getLine());
+		assertEquals(11, position.getEndLine());
+
+		assertEquals(163, position.getSourceStart());
+		assertEquals(279, position.getSourceEnd());
+		assertEquals("@Target(value={})\n"
+				+ "@Retention(RetentionPolicy.RUNTIME)  \n"
+				+ "public abstract @interface FooAnnotation {\n"
+				+ "\tString value();\n"
+				+ "}", contentAtPosition(classContent, position));
+
+		assertEquals("{\n"
+				+ "\tString value();\n"
+				+ "}", contentAtPosition(classContent, position.getBodyStart(), position.getBodyEnd()));
+
+		assertEquals("FooAnnotation", contentAtPosition(classContent, position.getNameStart(), position.getNameEnd()));
+		assertEquals("public abstract", contentAtPosition(classContent, position.getModifierSourceStart(), position.getModifierSourceEnd()));
+		
+		CtMethod<?> method1 = foo.getMethodsByName("value").get(0);
+		BodyHolderSourcePosition position1 = (BodyHolderSourcePosition) method1.getPosition();
+
+		assertEquals(10, position1.getLine());
+		assertEquals(10, position1.getEndLine());
+
+		assertEquals(263, position1.getSourceStart());
+		assertEquals(277, position1.getSourceEnd());
+
+		assertEquals("String value();", contentAtPosition(classContent, position1));
+		assertEquals("value", contentAtPosition(classContent, position1.getNameStart(), position1.getNameEnd()));
+		assertEquals("", contentAtPosition(classContent, position1.getModifierSourceStart(), position1.getModifierSourceEnd()));
+		//contract: body of abstract method is empty
+		assertEquals("", contentAtPosition(classContent, position1.getBodyStart(), position1.getBodyEnd()));
+	}
 
 	@Test
 	public void testPositionField() throws Exception {
@@ -193,6 +275,10 @@ public class PositionTest {
 				+ "\t}", contentAtPosition(classContent, position1));
 		assertEquals("m", contentAtPosition(classContent, position1.getNameStart(), position1.getNameEnd()));
 		assertEquals("public static", contentAtPosition(classContent, position1.getModifierSourceStart(), position1.getModifierSourceEnd()));
+		//contract: body contains starting and ending brackets {}
+		assertEquals("{\n"
+				+ "\t\treturn;\n"
+				+ "\t}", contentAtPosition(classContent, position1.getBodyStart(), position1.getBodyEnd()));
 
 		DeclarationSourcePosition positionParam1 = (DeclarationSourcePosition) method1.getParameters().get(0).getPosition();
 
@@ -231,6 +317,40 @@ public class PositionTest {
 		contentAtPosition(classContent, position4);
 	}
 
+	@Test
+	public void testPositionAbstractMethod() throws Exception {
+		final Factory build = build(FooAbstractMethod.class);
+		final CtClass<FooMethod> foo = build.Class().get(FooAbstractMethod.class);
+		String classContent = getClassContent(foo);
+
+		CtMethod<?> method1 = foo.getMethodsByName("m").get(0);
+		BodyHolderSourcePosition position1 = (BodyHolderSourcePosition) method1.getPosition();
+
+		assertEquals(5, position1.getLine());
+		assertEquals(5, position1.getEndLine());
+
+		assertEquals(86, position1.getSourceStart());
+		assertEquals(125, position1.getSourceEnd());
+
+		assertEquals("public abstract void m(final int parm1);", contentAtPosition(classContent, position1));
+		assertEquals("m", contentAtPosition(classContent, position1.getNameStart(), position1.getNameEnd()));
+		assertEquals("public abstract", contentAtPosition(classContent, position1.getModifierSourceStart(), position1.getModifierSourceEnd()));
+		//contract: body of abstract method is empty
+		assertEquals("", contentAtPosition(classContent, position1.getBodyStart(), position1.getBodyEnd()));
+
+		DeclarationSourcePosition positionParam1 = (DeclarationSourcePosition) method1.getParameters().get(0).getPosition();
+
+		assertEquals(5, positionParam1.getLine());
+		assertEquals(5, positionParam1.getEndLine());
+
+		assertEquals(109, positionParam1.getSourceStart());
+		assertEquals(123, positionParam1.getSourceEnd());
+
+		assertEquals("final int parm1", contentAtPosition(classContent, positionParam1));
+		assertEquals("parm1", contentAtPosition(classContent, positionParam1.getNameStart(), positionParam1.getNameEnd()));
+		assertEquals("final", contentAtPosition(classContent, positionParam1.getModifierSourceStart(), positionParam1.getModifierSourceEnd()));
+	}
+
 	@Test
 	public void testPositionStatement() throws Exception {
 		final Factory build = build(FooStatement.class);
diff --git a/src/test/java/spoon/test/position/testclasses/FooAbstractMethod.java b/src/test/java/spoon/test/position/testclasses/FooAbstractMethod.java
new file mode 100644
index 000000000..2ca893511
--- /dev/null
+++ b/src/test/java/spoon/test/position/testclasses/FooAbstractMethod.java
@@ -0,0 +1,6 @@
+package spoon.test.position.testclasses;
+
+public abstract class FooAbstractMethod {
+
+	public abstract void m(final int parm1);
+}
\ No newline at end of file
diff --git a/src/test/java/spoon/test/position/testclasses/FooAnnotation.java b/src/test/java/spoon/test/position/testclasses/FooAnnotation.java
new file mode 100644
index 000000000..c8609e6ae
--- /dev/null
+++ b/src/test/java/spoon/test/position/testclasses/FooAnnotation.java
@@ -0,0 +1,11 @@
+package spoon.test.position.testclasses;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Target(value={})
+@Retention(RetentionPolicy.RUNTIME)  
+public abstract @interface FooAnnotation {
+	String value();
+}
\ No newline at end of file
diff --git a/src/test/java/spoon/test/position/testclasses/FooInterface.java b/src/test/java/spoon/test/position/testclasses/FooInterface.java
new file mode 100644
index 000000000..d31d6e091
--- /dev/null
+++ b/src/test/java/spoon/test/position/testclasses/FooInterface.java
@@ -0,0 +1,9 @@
+package spoon.test.position.testclasses;
+
+import javax.annotation.Resource;
+
+@Deprecated
+@Resource(description="fake")
+public interface FooInterface {
+
+}
\ No newline at end of file
