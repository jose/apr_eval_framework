diff --git a/molgenis-semantic-mapper/src/main/java/org/molgenis/semanticmapper/service/impl/AlgorithmServiceImpl.java b/molgenis-semantic-mapper/src/main/java/org/molgenis/semanticmapper/service/impl/AlgorithmServiceImpl.java
index 14fa4535e..9246b3049 100644
--- a/molgenis-semantic-mapper/src/main/java/org/molgenis/semanticmapper/service/impl/AlgorithmServiceImpl.java
+++ b/molgenis-semantic-mapper/src/main/java/org/molgenis/semanticmapper/service/impl/AlgorithmServiceImpl.java
@@ -10,6 +10,7 @@ import org.molgenis.data.meta.model.EntityType;
 import org.molgenis.data.semantic.Relation;
 import org.molgenis.js.magma.JsMagmaScriptEvaluator;
 import org.molgenis.ontology.core.model.OntologyTerm;
+import org.molgenis.script.core.ScriptException;
 import org.molgenis.security.core.runas.RunAsSystem;
 import org.molgenis.semanticmapper.algorithmgenerator.bean.GeneratedAlgorithm;
 import org.molgenis.semanticmapper.algorithmgenerator.service.AlgorithmGeneratorService;
@@ -104,14 +105,21 @@ public class AlgorithmServiceImpl implements AlgorithmService
 	public Iterable<AlgorithmEvaluation> applyAlgorithm(Attribute targetAttribute, String algorithm,
 			Iterable<Entity> sourceEntities)
 	{
-		return stream(sourceEntities.spliterator(), false).map(entity ->
-		{
+		return stream(sourceEntities.spliterator(), false).map(entity -> {
 			AlgorithmEvaluation algorithmResult = new AlgorithmEvaluation(entity);
 			Object derivedValue;
 
 			try
 			{
 				Object result = jsMagmaScriptEvaluator.eval(algorithm, entity);
+
+				// jsMagmaScriptEvaluator.eval() catches and returns the error instead of throwing it
+				// so check instance of result object here
+				if (result instanceof ScriptException)
+				{
+					return algorithmResult.errorMessage(((ScriptException) result).getMessage());
+				}
+
 				derivedValue = convert(result, targetAttribute);
 			}
 			catch (RuntimeException e)
@@ -135,8 +143,16 @@ public class AlgorithmServiceImpl implements AlgorithmService
 		{
 			return null;
 		}
-		Object value = jsMagmaScriptEvaluator.eval(algorithm, sourceEntity);
-		return convert(value, attributeMapping.getTargetAttribute());
+		Object result = jsMagmaScriptEvaluator.eval(algorithm, sourceEntity);
+
+		// jsMagmaScriptEvaluator.eval() catches and returns the error instead of throwing it
+		// so check instance of result object here
+		if (result instanceof ScriptException)
+		{
+			throw new ScriptException(((ScriptException) result).getMessage(), ((ScriptException) result).getCause());
+		}
+
+		return convert(result, attributeMapping.getTargetAttribute());
 	}
 
 	@Override
diff --git a/molgenis-semantic-mapper/src/test/java/org/molgenis/semanticmapper/service/impl/AlgorithmServiceImplTest.java b/molgenis-semantic-mapper/src/test/java/org/molgenis/semanticmapper/service/impl/AlgorithmServiceImplTest.java
index 71b32dc0c..e1eb40fb0 100644
--- a/molgenis-semantic-mapper/src/test/java/org/molgenis/semanticmapper/service/impl/AlgorithmServiceImplTest.java
+++ b/molgenis-semantic-mapper/src/test/java/org/molgenis/semanticmapper/service/impl/AlgorithmServiceImplTest.java
@@ -2,23 +2,24 @@ package org.molgenis.semanticmapper.service.impl;
 
 import com.google.common.collect.Lists;
 import org.mockito.Mock;
-import org.mockito.Mockito;
 import org.molgenis.data.Entity;
 import org.molgenis.data.EntityManager;
 import org.molgenis.data.meta.AttributeType;
 import org.molgenis.data.meta.model.Attribute;
 import org.molgenis.js.magma.JsMagmaScriptEvaluator;
+import org.molgenis.script.core.ScriptException;
 import org.molgenis.semanticmapper.algorithmgenerator.service.AlgorithmGeneratorService;
 import org.molgenis.semanticmapper.mapping.model.AttributeMapping;
 import org.molgenis.semanticsearch.service.OntologyTagService;
 import org.molgenis.semanticsearch.service.SemanticSearchService;
 import org.molgenis.test.AbstractMockitoTest;
-import org.testng.Assert;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
 
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
 import static org.molgenis.data.meta.AttributeType.*;
+import static org.testng.Assert.assertEquals;
 
 public class AlgorithmServiceImplTest extends AbstractMockitoTest
 {
@@ -91,28 +92,54 @@ public class AlgorithmServiceImplTest extends AbstractMockitoTest
 		String algorithm = "algorithm";
 		Entity entity = mock(Entity.class);
 
-		Mockito.when(jsMagmaScriptEvaluator.eval(algorithm, entity)).thenThrow(new NullPointerException());
+		when(jsMagmaScriptEvaluator.eval(algorithm, entity)).thenThrow(new NullPointerException());
 
 		Iterable<AlgorithmEvaluation> result = algorithmServiceImpl.applyAlgorithm(attribute, algorithm,
 				Lists.newArrayList(entity));
 		AlgorithmEvaluation eval = result.iterator().next();
 
-		Assert.assertEquals(eval.getErrorMessage(),
+		assertEquals(eval.getErrorMessage(),
 				"Applying an algorithm on a null source value caused an exception. Is the target attribute required?");
 	}
 
+	@Test
+	public void testApplyAlgorithmWitInvalidScript()
+	{
+		Attribute attribute = mock(Attribute.class);
+		String algorithm = "algorithm";
+		Entity entity = mock(Entity.class);
+
+		when(jsMagmaScriptEvaluator.eval(algorithm, entity)).thenReturn(
+				new ScriptException("algorithm is not defined"));
+		Iterable<AlgorithmEvaluation> result = algorithmServiceImpl.applyAlgorithm(attribute, algorithm,
+				Lists.newArrayList(entity));
+		AlgorithmEvaluation eval = result.iterator().next();
+		assertEquals(eval.getErrorMessage(), "algorithm is not defined");
+	}
+
+	@Test(expectedExceptions = ScriptException.class, expectedExceptionsMessageRegExp = "algorithm is not defined")
+	public void testApplyWithInvalidScript()
+	{
+		AttributeMapping attributeMapping = mock(AttributeMapping.class);
+		String algorithm = "algorithm";
+		when(attributeMapping.getAlgorithm()).thenReturn(algorithm);
+
+		Entity sourceEntity = mock(Entity.class);
+		when(jsMagmaScriptEvaluator.eval(algorithm, sourceEntity)).thenReturn(
+				new ScriptException("algorithm is not defined"));
+		algorithmServiceImpl.apply(attributeMapping, sourceEntity, null);
+	}
+
 	private void testApplyConvertException(String algorithmResult, AttributeType attributeType)
 	{
 		AttributeMapping attributeMapping = mock(AttributeMapping.class);
 		String algorithm = "algorithm";
-		Mockito.when(attributeMapping.getAlgorithm()).thenReturn(algorithm);
-		Attribute targetAttribute = Mockito.when(mock(Attribute.class).getDataType())
-										   .thenReturn(attributeType)
-										   .getMock();
-		Mockito.when(attributeMapping.getTargetAttribute()).thenReturn(targetAttribute);
+		when(attributeMapping.getAlgorithm()).thenReturn(algorithm);
+		Attribute targetAttribute = when(mock(Attribute.class).getDataType()).thenReturn(attributeType).getMock();
+		when(attributeMapping.getTargetAttribute()).thenReturn(targetAttribute);
 
 		Entity sourceEntity = mock(Entity.class);
-		Mockito.when(jsMagmaScriptEvaluator.eval(algorithm, sourceEntity)).thenReturn(algorithmResult);
+		when(jsMagmaScriptEvaluator.eval(algorithm, sourceEntity)).thenReturn(algorithmResult);
 
 		algorithmServiceImpl.apply(attributeMapping, sourceEntity, null);
 	}
