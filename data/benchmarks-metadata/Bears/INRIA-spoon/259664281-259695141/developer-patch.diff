diff --git a/src/main/java/spoon/support/template/Parameters.java b/src/main/java/spoon/support/template/Parameters.java
index ed93b9ef6..48ced1d69 100644
--- a/src/main/java/spoon/support/template/Parameters.java
+++ b/src/main/java/spoon/support/template/Parameters.java
@@ -268,8 +268,8 @@ public abstract class Parameters {
 			//the reference to this is not template parameter
 			return false;
 		}
-		if (getTemplateParameterType(ref.getFactory()).isSubtypeOf(ref.getType())) {
-			//the type of template field is or extends from class TemplateParameter.
+		if (TemplateParameter.class.getName().equals(ref.getType().getQualifiedName())) {
+			//the type of template field is TemplateParameter.
 			return true;
 		}
 		return false;
diff --git a/src/test/java/spoon/test/template/TemplateTest.java b/src/test/java/spoon/test/template/TemplateTest.java
index d4bda93bd..1d9f83144 100644
--- a/src/test/java/spoon/test/template/TemplateTest.java
+++ b/src/test/java/spoon/test/template/TemplateTest.java
@@ -35,6 +35,7 @@ import spoon.test.template.testclasses.InnerClassTemplate;
 import spoon.test.template.testclasses.InvocationTemplate;
 import spoon.test.template.testclasses.LoggerModel;
 import spoon.test.template.testclasses.NtonCodeTemplate;
+import spoon.test.template.testclasses.ObjectIsNotParamTemplate;
 import spoon.test.template.testclasses.SecurityCheckerTemplate;
 import spoon.test.template.testclasses.SimpleTemplate;
 import spoon.test.template.testclasses.SubStringTemplate;
@@ -894,4 +895,17 @@ public class TemplateTest {
 			}
 		}
 	}
+
+	@Test
+	public void testObjectIsNotParamTemplate() throws Exception {
+		Launcher spoon = new Launcher();
+		spoon.addTemplateResource(new FileSystemFile("./src/test/java/spoon/test/template/testclasses/ObjectIsNotParamTemplate.java"));
+
+		spoon.buildModel();
+		Factory factory = spoon.getFactory();
+		//contract: String value is substituted in substring of literal, named element and reference
+		final CtClass<?> result = (CtClass<?>) new ObjectIsNotParamTemplate().apply(factory.createClass());
+		assertEquals(0, result.getMethodsByName("methXXXd").size());
+		assertEquals(1, result.getMethodsByName("method").size());
+	}
 }
diff --git a/src/test/java/spoon/test/template/testclasses/ObjectIsNotParamTemplate.java b/src/test/java/spoon/test/template/testclasses/ObjectIsNotParamTemplate.java
new file mode 100644
index 000000000..a9aab0f54
--- /dev/null
+++ b/src/test/java/spoon/test/template/testclasses/ObjectIsNotParamTemplate.java
@@ -0,0 +1,17 @@
+package spoon.test.template.testclasses;
+
+import spoon.template.ExtensionTemplate;
+import spoon.template.Local;
+
+public class ObjectIsNotParamTemplate extends ExtensionTemplate {
+
+	//this is normal field of type Object - it must not be considered as template parameter automatically
+	Object o = "XXX";
+	
+	//the "o" in the method name must not be substituted
+	void method() {}
+	
+	@Local
+	public ObjectIsNotParamTemplate() {
+	}
+}
