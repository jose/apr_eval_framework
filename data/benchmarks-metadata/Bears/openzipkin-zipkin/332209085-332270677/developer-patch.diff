diff --git a/zipkin2/src/main/java/zipkin2/Span.java b/zipkin2/src/main/java/zipkin2/Span.java
index f2775c3e5..defa6b6ad 100644
--- a/zipkin2/src/main/java/zipkin2/Span.java
+++ b/zipkin2/src/main/java/zipkin2/Span.java
@@ -466,7 +466,7 @@ public final class Span implements Serializable { // for Spark and Flink jobs
 
     /** @see Span#debug */
     public Builder debug(@Nullable Boolean debug) {
-      if (debug != null) return debug(debug);
+      if (debug != null) return debug((boolean) debug);
       flags &= ~FLAG_DEBUG_SET;
       return this;
     }
@@ -484,7 +484,7 @@ public final class Span implements Serializable { // for Spark and Flink jobs
 
     /** @see Span#shared */
     public Builder shared(@Nullable Boolean shared) {
-      if (shared != null) return shared(shared);
+      if (shared != null) return shared((boolean) shared);
       flags &= ~FLAG_SHARED_SET;
       return this;
     }
diff --git a/zipkin2/src/test/java/zipkin2/SpanTest.java b/zipkin2/src/test/java/zipkin2/SpanTest.java
index 9b6e99534..4e9952787 100644
--- a/zipkin2/src/test/java/zipkin2/SpanTest.java
+++ b/zipkin2/src/test/java/zipkin2/SpanTest.java
@@ -106,6 +106,40 @@ public class SpanTest {
       .isNull();
   }
 
+  @Test public void canUsePrimitiveOverloads() {
+    Span primitives = base.toBuilder()
+      .timestamp(1L)
+      .duration(1L)
+      .shared(true)
+      .debug(true)
+      .build();
+
+    Span objects =  base.toBuilder()
+      .timestamp(Long.valueOf(1L))
+      .duration(Long.valueOf(1L))
+      .shared(Boolean.TRUE)
+      .debug(Boolean.TRUE)
+      .build();
+
+    assertThat(primitives)
+      .isEqualToComparingFieldByField(objects);
+  }
+
+  @Test public void nullToZeroOrFalse() {
+    Span nulls = base.toBuilder()
+      .timestamp(null)
+      .duration(null)
+      .build();
+
+    Span zeros =  base.toBuilder()
+      .timestamp(0L)
+      .duration(0L)
+      .build();
+
+    assertThat(nulls)
+      .isEqualToComparingFieldByField(zeros);
+  }
+
   @Test public void toString_isJson() {
     assertThat(base.toString()).hasToString(
       "{\"traceId\":\"0000000000000001\",\"id\":\"0000000000000001\",\"localEndpoint\":{\"serviceName\":\"frontend\",\"ipv4\":\"127.0.0.1\"}}"
