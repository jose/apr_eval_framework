diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/FieldAccessor.java b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/FieldAccessor.java
index 12b37bc78..9a52643c4 100644
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/FieldAccessor.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/FieldAccessor.java
@@ -205,7 +205,7 @@ public abstract class FieldAccessor implements Implementation {
              * {@inheritDoc}
              */
             public Prepared prepare(TypeDescription instrumentedType) {
-                if (!instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure())) {
+                if (!fieldDescription.isStatic() && !instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure())) {
                     throw new IllegalStateException(fieldDescription + " is not declared by " + instrumentedType);
                 } else if (!fieldDescription.isAccessibleTo(instrumentedType)) {
                     throw new IllegalStateException("Cannot access " + fieldDescription + " from " + instrumentedType);
@@ -862,11 +862,7 @@ public abstract class FieldAccessor implements Implementation {
                     throw new IllegalArgumentException(instrumentedMethod + " does not describe a field getter or setter");
                 }
                 FieldDescription fieldDescription = fieldLocation.resolve(instrumentedMethod);
-                if (!instrumentedType.isAssignableTo(fieldDescription.getDeclaringType().asErasure())) {
-                    throw new IllegalStateException(fieldDescription + " is not declared in the hierarchy of " + instrumentedType);
-                } else if (!fieldDescription.isAccessibleTo(instrumentedType)) {
-                    throw new IllegalStateException("Cannot access " + fieldDescription + " from " + instrumentedType);
-                } else if (!fieldDescription.isStatic() && instrumentedMethod.isStatic()) {
+                if (!fieldDescription.isStatic() && instrumentedMethod.isStatic()) {
                     throw new IllegalStateException("Cannot set instance field " + fieldDescription + " from " + instrumentedMethod);
                 }
                 StackManipulation implementation, initialization = fieldDescription.isStatic()
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorOtherTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorOtherTest.java
index 411bd3cf8..3ddfa7e1a 100644
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorOtherTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/FieldAccessorOtherTest.java
@@ -16,6 +16,7 @@ import org.junit.Test;
 import org.junit.rules.MethodRule;
 
 import java.lang.reflect.Field;
+import java.util.concurrent.Callable;
 
 import static net.bytebuddy.matcher.ElementMatchers.isDeclaredBy;
 import static net.bytebuddy.matcher.ElementMatchers.named;
@@ -158,6 +159,19 @@ public class FieldAccessorOtherTest {
         assertThat(instance.foo, instanceOf(JavaType.METHOD_TYPE.load()));
     }
 
+    @Test
+    public void testStaticFieldOfOtherClass() throws Exception {
+        DynamicType.Loaded<Callable> loaded = new ByteBuddy()
+                .subclass(Callable.class)
+                .method(named("call"))
+                .intercept(FieldAccessor.of(StaticFieldHolder.class.getField(FOO.toUpperCase())))
+                .make()
+                .load(StaticFieldHolder.class.getClassLoader(), ClassLoadingStrategy.Default.WRAPPER);
+        assertThat(loaded.getLoaded().getDeclaredFields().length, is(0));
+        Callable<?> instance = loaded.getLoaded().getDeclaredConstructor().newInstance();
+        assertThat(instance.call(), is((Object) FOO));
+    }
+
     @Test(expected = IllegalStateException.class)
     public void testNotAssignable() throws Exception {
         new ByteBuddy()
@@ -250,10 +264,6 @@ public class FieldAccessorOtherTest {
         }
     }
 
-    public static class BarSub extends Bar {
-        /* empty */
-    }
-
     @SuppressWarnings("unused")
     public static class Qux {
 
@@ -318,4 +328,9 @@ public class FieldAccessorOtherTest {
             register(FOO, foo);
         }
     }
+
+    public static class StaticFieldHolder {
+
+        public static final String FOO = "foo";
+    }
 }
