diff --git a/src/main/java/spoon/support/reflect/code/CtBlockImpl.java b/src/main/java/spoon/support/reflect/code/CtBlockImpl.java
index 1e289a5ce..64700e721 100644
--- a/src/main/java/spoon/support/reflect/code/CtBlockImpl.java
+++ b/src/main/java/spoon/support/reflect/code/CtBlockImpl.java
@@ -190,7 +190,23 @@ public class CtBlockImpl<R> extends CtStatementImpl implements CtBlock<R> {
 	@Override
 	public void removeStatement(CtStatement statement) {
 		if (this.statements != CtElementImpl.<CtStatement>emptyList()) {
-			this.statements.remove(statement);
+
+			boolean hasBeenRemoved = false;
+			// we cannot use a remove(statement) as it uses the equals
+			// and a block can have twice exactly the same statement.
+			for (int i = 0; i < this.statements.size(); i++) {
+				if (this.statements.get(i) == statement) {
+					this.statements.remove(i);
+					hasBeenRemoved = true;
+					break;
+				}
+			}
+
+			// in case we use it with a statement manually built
+			if (!hasBeenRemoved) {
+				this.statements.remove(statement);
+			}
+
 			if (isImplicit() && statements.size() == 0) {
 				setImplicit(false);
 			}
diff --git a/src/test/java/spoon/test/ctBlock/TestCtBlock.java b/src/test/java/spoon/test/ctBlock/TestCtBlock.java
new file mode 100644
index 000000000..bba61ece1
--- /dev/null
+++ b/src/test/java/spoon/test/ctBlock/TestCtBlock.java
@@ -0,0 +1,45 @@
+package spoon.test.ctBlock;
+
+import org.junit.Test;
+import spoon.Launcher;
+import spoon.reflect.code.CtBlock;
+import spoon.reflect.code.CtIf;
+import spoon.reflect.code.CtStatement;
+import spoon.reflect.declaration.CtMethod;
+import spoon.reflect.visitor.filter.NameFilter;
+
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * Created by urli on 15/03/2017.
+ */
+public class TestCtBlock {
+
+    @Test
+    public void testRemoveStatement() {
+        Launcher spoon = new Launcher();
+        spoon.addInputResource("./src/test/java/spoon/test/ctBlock/testclasses/Toto.java");
+        spoon.buildModel();
+
+        List<CtMethod> methods = spoon.getModel().getElements(new NameFilter<CtMethod>("foo"));
+
+        assertEquals(1, methods.size());
+
+        CtMethod foo = methods.get(0);
+
+        CtBlock block = foo.getBody();
+        CtStatement lastStatement = block.getLastStatement();
+
+        assertEquals("i++", lastStatement.toString());
+
+        block.removeStatement(lastStatement);
+
+        CtStatement newLastStatement = block.getLastStatement();
+
+        assertTrue(newLastStatement != lastStatement);
+        assertTrue(newLastStatement instanceof CtIf);
+    }
+}
diff --git a/src/test/java/spoon/test/ctBlock/testclasses/Toto.java b/src/test/java/spoon/test/ctBlock/testclasses/Toto.java
new file mode 100644
index 000000000..6acce0878
--- /dev/null
+++ b/src/test/java/spoon/test/ctBlock/testclasses/Toto.java
@@ -0,0 +1,16 @@
+package spoon.test.ctBlock.testclasses;
+
+/**
+ * Created by urli on 15/03/2017.
+ */
+public class Toto {
+
+    public void foo() {
+        int i = 1;
+        i++;
+        if (i > 0) {
+            java.lang.System.out.println("test");
+        }
+        i++;
+    }
+}
diff --git a/src/test/java/spoon/test/snippets/SnippetTest.java b/src/test/java/spoon/test/snippets/SnippetTest.java
index 9906faa87..815bcb33f 100644
--- a/src/test/java/spoon/test/snippets/SnippetTest.java
+++ b/src/test/java/spoon/test/snippets/SnippetTest.java
@@ -4,6 +4,7 @@ import org.junit.Test;
 import spoon.Launcher;
 import spoon.compiler.SpoonResource;
 import spoon.reflect.code.CtBinaryOperator;
+import spoon.reflect.code.CtBlock;
 import spoon.reflect.code.CtCodeSnippetExpression;
 import spoon.reflect.code.CtExpression;
 import spoon.reflect.code.CtReturn;
@@ -104,5 +105,4 @@ public class SnippetTest {
 		spoon.buildModel();
 		assertEquals("foo.bar", spoon.getFactory().Type().get("foo.bar.X").getPackage().getQualifiedName());
 	}
-
 }
