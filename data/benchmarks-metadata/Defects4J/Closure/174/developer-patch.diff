--- src/com/google/javascript/jscomp/JsAst.java	2023-12-05 20:05:45.563014832 +0000
+++ src/com/google/javascript/jscomp/JsAst.java	2023-12-05 20:05:49.417167820 +0000
@@ -79,6 +79,7 @@
   }
 
   private void parse(AbstractCompiler compiler) {
+    int startErrorCount = compiler.getErrorManager().getErrorCount();
     try {
       ParserRunner.ParseResult result = ParserRunner.parse(sourceFile, sourceFile.getCode(),
           compiler.getParserConfig(),
@@ -92,10 +93,11 @@
     }
 
 
-    if (root == null || compiler.hasHaltingErrors()) {
+    if (root == null ||
         // Most passes try to report as many errors as possible,
         // so there may already be errors. We only care if there were
         // errors in the code we just parsed.
+        (compiler.getErrorManager().getErrorCount() > startErrorCount && !compiler.isIdeMode())) {
       // There was a parse error or IOException, so use a dummy block.
       root = IR.script();
     } else {
--- src/com/google/javascript/jscomp/NodeUtil.java	2023-12-05 20:05:45.408251862 +0000
+++ src/com/google/javascript/jscomp/NodeUtil.java	2023-12-05 20:05:49.418080868 +0000
@@ -2364,9 +2364,12 @@
     if (nameNode.isName()) {
       result = IR.var(nameNode, value);
       result.setJSDocInfo(info);
-    } else {
+    } else if (value != null) {
       result = IR.exprResult(IR.assign(nameNode, value));
       result.getFirstChild().setJSDocInfo(info);
+    } else {
+      result = IR.exprResult(nameNode);
+      result.getFirstChild().setJSDocInfo(info);
     }
     return result;
   }
--- src/com/google/javascript/jscomp/ScopedAliases.java	2023-12-05 20:05:45.563432992 +0000
+++ src/com/google/javascript/jscomp/ScopedAliases.java	2023-12-05 20:05:49.418525288 +0000
@@ -353,8 +353,8 @@
       for (Var v : scope.getVarIterable()) {
         Node n = v.getNode();
         Node parent = n.getParent();
-        boolean isVarAssign = parent.isVar() && n.hasChildren();
-        if (isVarAssign && n.getFirstChild().isQualifiedName()) {
+        boolean isVar = parent.isVar();
+        if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
           recordAlias(v);
         } else if (v.isBleedingFunction()) {
           // Bleeding functions already get a BAD_PARAMETERS error, so just
@@ -362,8 +362,10 @@
         } else if (parent.getType() == Token.LP) {
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
-        } else if (isVarAssign) {
-          Node value = v.getInitialValue().detachFromParent();
+        } else if (isVar) {
+          Node value = n.hasChildren() ?
+              v.getInitialValue().detachFromParent() :
+              null;
           String name = n.getString();
           int nameCount = scopedAliasNames.count(name);
           scopedAliasNames.add(name);
@@ -374,6 +376,7 @@
 
           // Add $jscomp.scope.name = EXPR;
           // Make sure we copy over all the jsdoc and debug info.
+          if (value != null || v.getJSDocInfo() != null) {
             Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(
                 compiler.getCodingConvention(),
                 globalName,
@@ -383,6 +386,7 @@
             NodeUtil.setDebugInformation(
                 newDecl.getFirstChild().getFirstChild(), n, name);
             parent.getParent().addChildBefore(newDecl, parent);
+          }
 
           // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
           v.getNameNode().addChildToFront(
