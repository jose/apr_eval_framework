diff --git a/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java
index 9b57cb71b..943b7624a 100644
--- a/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java
+++ b/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java
@@ -177,13 +177,18 @@ public class CtTypeParameterReferenceImpl extends CtTypeReferenceImpl<Object> im
 
 		CtElement e = this;
 		CtElement parent = getParent();
+		if (parent instanceof CtTypeReference) {
+			if (parent.isParentInitialized() == false) {
+				return null;
+			}
+			parent = parent.getParent();
+		}
 		if (parent instanceof CtExecutableReference) {
-
-			CtElement parent2 = ((CtExecutableReference) parent).getDeclaration();
+			CtElement parent2 = ((CtExecutableReference) parent).getExecutableDeclaration();
 			if (parent2 instanceof CtMethod) {
 				e = parent2;
 			} else {
-				e = ((CtExecutableReference<?>) parent).getDeclaringType().getTypeDeclaration();
+				e = e.getParent(CtFormalTypeDeclarer.class);
 			}
 		} else {
 			e = e.getParent(CtFormalTypeDeclarer.class);
diff --git a/src/test/java/spoon/test/generics/GenericsTest.java b/src/test/java/spoon/test/generics/GenericsTest.java
index 9bf3b979f..a7bb8fea7 100644
--- a/src/test/java/spoon/test/generics/GenericsTest.java
+++ b/src/test/java/spoon/test/generics/GenericsTest.java
@@ -59,7 +59,9 @@ import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 import static spoon.testing.utils.ModelUtils.build;
@@ -1036,4 +1038,60 @@ public class GenericsTest {
 
 		assertTrue(invocationDetected);
 	}
+
+	@Test
+	public void testGetDeclarationOfTypeParameterReference() {
+		Launcher launcher = new Launcher();
+		launcher.addInputResource("./src/test/java/spoon/test/generics/testclasses/ExtendedPaella.java");
+		launcher.addInputResource("./src/test/java/spoon/test/generics/testclasses/Paella.java");
+		launcher.buildModel();
+
+		Factory factory = launcher.getFactory();
+
+		CtClass extendedPaella = factory.getModel().getElements(new NameFilter<CtClass>("ExtendedPaella")).get(0);
+		List<CtTypeParameter> typeParameterList = extendedPaella.getFormalCtTypeParameters();
+
+		assertEquals(1, typeParameterList.size());
+
+		CtMethod totoMethod = factory.getModel().getElements(new NameFilter<CtMethod>("toto")).get(0);
+		CtTypeReference returnTypeToto = totoMethod.getType();
+		CtTypeReference paramToto = ((CtParameter)totoMethod.getParameters().get(0)).getType();
+
+		CtType declaration = returnTypeToto.getDeclaration();
+
+		assertSame(typeParameterList.get(0), declaration);
+		assertSame(typeParameterList.get(0), paramToto.getDeclaration());
+
+		CtMethod machinMethod = factory.getModel().getElements(new NameFilter<CtMethod>("machin")).get(0);
+		CtTypeReference returnTypeMachin = machinMethod.getType();
+		List<CtTypeParameter> formalCtTypeParameters = machinMethod.getFormalCtTypeParameters();
+
+		assertEquals(1, formalCtTypeParameters.size());
+
+		CtType declarationMachin = returnTypeMachin.getDeclaration();
+
+		assertNotSame(typeParameterList.get(0), declarationMachin);
+		assertSame(formalCtTypeParameters.get(0), declarationMachin);
+
+		CtClass innerPaella = factory.getModel().getElements(new NameFilter<CtClass>("InnerPaella")).get(0);
+		List<CtTypeParameter> innerTypeParametersList = innerPaella.getFormalCtTypeParameters();
+
+		assertEquals(typeParameterList.get(0), innerTypeParametersList.get(0).getSuperclass().getDeclaration());
+
+		CtMethod innerMachinMethod = factory.getModel().getElements(new NameFilter<CtMethod>("innerMachin")).get(0);
+		CtTypeReference returnTypeInnerMachin = innerMachinMethod.getType();
+		CtTypeReference paramInnerMachinType = ((CtParameter)innerMachinMethod.getParameters().get(0)).getType();
+		List<CtTypeParameter> innerMachinFormalCtType = innerMachinMethod.getFormalCtTypeParameters();
+
+		assertSame(typeParameterList.get(0), returnTypeInnerMachin.getDeclaration());
+		assertSame(innerMachinFormalCtType.get(0), paramInnerMachinType.getDeclaration());
+
+		CtMethod innerTotoMethod = factory.getModel().getElements(new NameFilter<CtMethod>("innerToto")).get(0);
+		CtTypeReference returnInnerToto = innerTotoMethod.getType();
+		CtTypeReference paramInnerToto = ((CtParameter)innerTotoMethod.getParameters().get(0)).getType();
+		List<CtTypeParameter> innerTotoFormatCtType = innerTotoMethod.getFormalCtTypeParameters();
+
+		assertSame(innerTotoFormatCtType.get(0), paramInnerToto.getDeclaration());
+		assertSame(innerTypeParametersList.get(0), returnInnerToto.getDeclaration());
+	}
 }
diff --git a/src/test/java/spoon/test/generics/testclasses/ExtendedPaella.java b/src/test/java/spoon/test/generics/testclasses/ExtendedPaella.java
new file mode 100644
index 000000000..62f0fc3e6
--- /dev/null
+++ b/src/test/java/spoon/test/generics/testclasses/ExtendedPaella.java
@@ -0,0 +1,29 @@
+package spoon.test.generics.testclasses;
+
+import java.util.ArrayList;
+import java.util.LinkedList;
+import java.util.List;
+
+/**
+ * Created by urli on 14/06/2017.
+ */
+public class ExtendedPaella<T extends List<T>> extends Paella {
+
+    class InnerPaella<L extends T> {
+        public <L extends ArrayList> T innerMachin(L param) {
+            return null;
+        }
+
+        public <T extends String> L innerToto(T param) {
+            return null;
+        }
+    }
+
+    public <T extends ArrayList> T machin() {
+        return null;
+    }
+
+    public T toto(T param) {
+        return null;
+    }
+}
diff --git a/src/test/java/spoon/test/lambda/LambdaTest.java b/src/test/java/spoon/test/lambda/LambdaTest.java
index 4e90cbe39..cf010eb7a 100644
--- a/src/test/java/spoon/test/lambda/LambdaTest.java
+++ b/src/test/java/spoon/test/lambda/LambdaTest.java
@@ -9,14 +9,18 @@ import spoon.reflect.code.CtFieldAccess;
 import spoon.reflect.code.CtIf;
 import spoon.reflect.code.CtLambda;
 import spoon.reflect.code.CtTypeAccess;
+import spoon.reflect.declaration.CtClass;
 import spoon.reflect.declaration.CtInterface;
 import spoon.reflect.declaration.CtMethod;
 import spoon.reflect.declaration.CtParameter;
 import spoon.reflect.declaration.CtType;
+import spoon.reflect.declaration.CtTypeParameter;
 import spoon.reflect.factory.Factory;
 import spoon.reflect.reference.CtArrayTypeReference;
 import spoon.reflect.reference.CtParameterReference;
+import spoon.reflect.reference.CtTypeParameterReference;
 import spoon.reflect.reference.CtTypeReference;
+import spoon.reflect.reference.CtWildcardReference;
 import spoon.reflect.visitor.Filter;
 import spoon.reflect.visitor.filter.AbstractFilter;
 import spoon.reflect.visitor.filter.LambdaFilter;
@@ -450,4 +454,17 @@ public class LambdaTest {
 	private CtLambda<?> getLambdaInFooByNumber(int number) {
 		return foo.getElements(new TypeFilter<CtLambda<?>>(CtLambda.class)).get(number);
 	}
+
+	@Test
+	public void testGetDeclarationOnTypeParameterFromLambda() {
+		List<CtTypeParameterReference> listCtTPR  = launcher.getModel().getElements(new TypeFilter<>(CtTypeParameterReference.class));
+
+		for (CtTypeParameterReference typeParameterReference : listCtTPR) {
+			if (!(typeParameterReference instanceof CtWildcardReference) && typeParameterReference.getDeclaration() == null) {
+				System.err.println(typeParameterReference.getSimpleName()+" from parent "+typeParameterReference.getParent(CtClass.class).getPosition()+"  has null declaration");
+				typeParameterReference.getDeclaration();
+				fail();
+			}
+		}
+	}
 }
