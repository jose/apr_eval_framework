diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/pool/TypePool.java b/byte-buddy-dep/src/main/java/net/bytebuddy/pool/TypePool.java
index 8e6a704a4..516166244 100644
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/pool/TypePool.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/pool/TypePool.java
@@ -7413,6 +7413,16 @@ public interface TypePool {
                  */
                 private Label firstLabel;
 
+                /**
+                 * A shift index for visible parameters that indicates a deviation of the actual parameter index.
+                 */
+                private int visibleParameterShift;
+
+                /**
+                 * A shift index for invisible parameters that indicates a deviation of the actual parameter index.
+                 */
+                private int invisibleParameterShift;
+
                 /**
                  * The default value of the found method or {@code null} if no such value exists.
                  */
@@ -7502,9 +7512,21 @@ public interface TypePool {
                     return new AnnotationExtractor(descriptor, annotationTokens, new ComponentTypeLocator.ForAnnotationProperty(Default.this, descriptor));
                 }
 
+                @Override
+                public void visitAnnotableParameterCount(int count, boolean visible) {
+                    if (visible) {
+                        visibleParameterShift = Type.getMethodType(descriptor).getArgumentTypes().length - count;
+                    } else {
+                        invisibleParameterShift = Type.getMethodType(descriptor).getArgumentTypes().length - count;
+                    }
+                }
+
                 @Override
                 public AnnotationVisitor visitParameterAnnotation(int index, String descriptor, boolean visible) {
-                    return new AnnotationExtractor(descriptor, index, parameterAnnotationTokens, new ComponentTypeLocator.ForAnnotationProperty(Default.this, descriptor));
+                    return new AnnotationExtractor(descriptor,
+                            index + (visible ? visibleParameterShift : invisibleParameterShift),
+                            parameterAnnotationTokens,
+                            new ComponentTypeLocator.ForAnnotationProperty(Default.this, descriptor));
                 }
 
                 @Override
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/pool/TypePoolDefaultMethodDescriptionTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/pool/TypePoolDefaultMethodDescriptionTest.java
index eae9ccb85..6b17d6fac 100644
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/pool/TypePoolDefaultMethodDescriptionTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/pool/TypePoolDefaultMethodDescriptionTest.java
@@ -51,7 +51,7 @@ public class TypePoolDefaultMethodDescriptionTest extends AbstractMethodDescript
 
     @Test
     @Override
-    @Ignore("Fails due to limitation since ASM 6.1: https://gitlab.ow2.org/asm/asm/issues/317814")
+//    @Ignore("Fails due to limitation since ASM 6.1: https://gitlab.ow2.org/asm/asm/issues/317814")
     public void testSyntethicParameter() throws Exception {
         super.testSyntethicParameter();
     }
