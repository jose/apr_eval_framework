--- src/main/java/org/jsoup/nodes/Element.java	2023-12-05 21:15:25.791456274 +0000
+++ src/main/java/org/jsoup/nodes/Element.java	2023-12-05 21:15:27.709331480 +0000
@@ -431,8 +431,15 @@
      * @return sibling elements
      */
     public Elements siblingElements() {
+        if (parentNode == null)
+            return new Elements(0);
 
-        return parent().children();
+        List<Element> elements = parent().children();
+        Elements siblings = new Elements(elements.size() - 1);
+        for (Element el: elements)
+            if (el != this)
+                siblings.add(el);
+        return siblings;
     }
 
     /**
@@ -444,6 +451,7 @@
      * @see #previousElementSibling()
      */
     public Element nextElementSibling() {
+        if (parentNode == null) return null;
         List<Element> siblings = parent().children();
         Integer index = indexInList(this, siblings);
         Validate.notNull(index);
@@ -459,6 +467,7 @@
      * @see #nextElementSibling()
      */
     public Element previousElementSibling() {
+        if (parentNode == null) return null;
         List<Element> siblings = parent().children();
         Integer index = indexInList(this, siblings);
         Validate.notNull(index);
--- src/main/java/org/jsoup/nodes/Node.java	2023-12-05 21:15:25.791845934 +0000
+++ src/main/java/org/jsoup/nodes/Node.java	2023-12-05 21:15:27.709697354 +0000
@@ -441,8 +441,15 @@
      @return node siblings. If the node has no parent, returns an empty list.
      */
     public List<Node> siblingNodes() {
+        if (parentNode == null)
+            return Collections.emptyList();
 
-        return parent().childNodes();
+        List<Node> nodes = parentNode.childNodes;
+        List<Node> siblings = new ArrayList<Node>(nodes.size() - 1);
+        for (Node node: nodes)
+            if (node != this)
+                siblings.add(node);
+        return siblings;
     }
 
     /**
@@ -467,6 +474,8 @@
      @return the previous sibling, or null if this is the first sibling
      */
     public Node previousSibling() {
+        if (parentNode == null)
+            return null; // root
 
         List<Node> siblings = parentNode.childNodes;
         Integer index = siblingIndex();
--- src/main/java/org/jsoup/select/Elements.java	2023-12-05 21:15:25.792223399 +0000
+++ src/main/java/org/jsoup/select/Elements.java	2023-12-05 21:15:27.710026982 +0000
@@ -19,6 +19,9 @@
         contents = new ArrayList<Element>();
     }
 
+    public Elements(int initialCapacity) {
+        contents = new ArrayList<Element>(initialCapacity);
+    }
 
     public Elements(Collection<Element> elements) {
         contents = new ArrayList<Element>(elements);
