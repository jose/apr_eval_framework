diff --git a/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java b/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
index 391d299c0..02a40f725 100644
--- a/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
+++ b/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
@@ -94,6 +94,7 @@ public class SnippetCompilationHelper {
 
 		//disconnect element from the parent, so it can be added to another model
 		ret.delete();
+		ret.setParent(null);
 
 		if (ret instanceof CtClass) {
 			CtClass klass = (CtClass) ret;
@@ -109,7 +110,13 @@ public class SnippetCompilationHelper {
 
 		CtReturn<T> ret = (CtReturn<T>) internalCompileStatement(expr, expr.getFactory().Type().OBJECT);
 
-		return ret.getReturnedExpression();
+		CtExpression<T> returnedExpression = ret.getReturnedExpression();
+
+		// this compiled expression is not in a parent, ready to be used
+		returnedExpression.delete();
+		returnedExpression.setParent(null);
+
+		return returnedExpression;
 	}
 
 	private static void build(Factory f, String contents) {
diff --git a/src/test/java/spoon/test/serializable/SerializableTest.java b/src/test/java/spoon/test/serializable/SerializableTest.java
index 492857f60..1af5cb239 100644
--- a/src/test/java/spoon/test/serializable/SerializableTest.java
+++ b/src/test/java/spoon/test/serializable/SerializableTest.java
@@ -25,39 +25,35 @@ public class SerializableTest {
 
 	@Test
 	public void testSerialCtStatement() throws Exception {
+		// contract: one can also serialize snippets
 		Factory factory = new FactoryImpl(new DefaultCoreFactory(), new StandardEnvironment());
 		CtStatement sta2 = (factory).Code()
 				.createCodeSnippetStatement("String hello =\"t1\"; System.out.println(hello)").compile();
 
 		byte[] ser = ByteSerialization.serialize(sta2);
-		CtStatement des = (CtStatement) ByteSerialization.deserialize(ser);
+		CtStatement deserializedSta2 = (CtStatement) ByteSerialization.deserialize(ser);
 
 		String sigBef = sta2.getShortRepresentation();
-		String sigAf = des.getShortRepresentation();
+		String sigAf = deserializedSta2.getShortRepresentation();
 
 		CtType<?> typeBef = sta2.getParent(CtType.class);
-		assertNotNull(typeBef);
+
+		// sta2 comes from a snippet, and snippets have no parent (#2318)
+		assertNull(typeBef);
 
 		assertEquals(sigBef, sigAf);
 
-		des.setFactory(factory);
+		deserializedSta2.setFactory(factory);
 		String toSBef = sta2.toString();
-		String toSgAf = des.toString();
+		String toSgAf = deserializedSta2.toString();
 
 		assertEquals(toSBef, toSgAf);
 
-		CtType<?> typeDes = des.getParent(CtType.class);
-		assertNotNull(typeDes);
-		//After deserialization, getDeclaringType throws an exception
-		CtType<?> decl =  typeDes.getDeclaringType();
-		assertNull(decl);
-
-		CtPackage parentOriginal = (CtPackage) typeBef.getParent();
-		CtPackage parentDeser = (CtPackage) typeDes.getParent();
-
-		assertEquals(CtPackage.TOP_LEVEL_PACKAGE_NAME,parentOriginal.getSimpleName());
+		CtType<?> typeDes = deserializedSta2.getParent(CtType.class);
 
-		assertEquals(CtPackage.TOP_LEVEL_PACKAGE_NAME,parentDeser.getSimpleName());
+		// typeDes comes from a serialized snippet, and snippets have no parent (#2318)
+		assertNull(typeDes);
+		assertFalse(deserializedSta2.isParentInitialized());
 
 	}
 
diff --git a/src/test/java/spoon/test/snippets/SnippetTest.java b/src/test/java/spoon/test/snippets/SnippetTest.java
index 1739adc5a..f78290da4 100644
--- a/src/test/java/spoon/test/snippets/SnippetTest.java
+++ b/src/test/java/spoon/test/snippets/SnippetTest.java
@@ -7,6 +7,7 @@ import spoon.reflect.code.CtBinaryOperator;
 import spoon.reflect.code.CtCodeSnippetExpression;
 import spoon.reflect.code.CtExpression;
 import spoon.reflect.code.CtReturn;
+import spoon.reflect.code.CtStatement;
 import spoon.reflect.declaration.CtClass;
 import spoon.reflect.declaration.CtElement;
 import spoon.reflect.declaration.CtMethod;
@@ -15,6 +16,8 @@ import spoon.support.compiler.SnippetCompilationHelper;
 import spoon.support.compiler.VirtualFile;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static spoon.testing.utils.ModelUtils.createFactory;
@@ -55,6 +58,10 @@ public class SnippetTest {
 
 		// Compile a first time the snippet.
 		final CtExpression<Object> compile = snippet.compile();
+
+		// contract: the element is fready to be used, not in any statement (#2318)
+		assertFalse(compile.isParentInitialized());
+
 		// Compile a second time the same snippet.
 		final CtExpression<Object> secondCompile = snippet.compile();
 
@@ -73,14 +80,13 @@ public class SnippetTest {
 	@Test
 	public void testCompileSnippetWithContext() {
 		// contract: a snippet object can be compiled with a context in the factory.
-		try {
-			// Add a class in the context.
-			factory.Class().create("AClass");
-			// Try to compile a snippet with a context.
-			factory.Code().createCodeSnippetStatement("int i = 1;").compile();
-		} catch (ClassCastException e) {
-			fail();
-		}
+		// Add a class in the context.
+		factory.Class().create("AClass");
+		// Try to compile a snippet with a context.
+		CtStatement statement = factory.Code().createCodeSnippetStatement("int i = 1;").compile();
+
+		// contract: the element is fready to be used, not in any statement (#2318)
+		assertFalse(statement.isParentInitialized());
 	}
 
 	@Test
