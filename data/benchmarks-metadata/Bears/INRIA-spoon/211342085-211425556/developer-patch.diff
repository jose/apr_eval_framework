diff --git a/src/main/java/spoon/refactoring/Refactoring.java b/src/main/java/spoon/refactoring/Refactoring.java
index 398b076b2..fce0c5fd2 100644
--- a/src/main/java/spoon/refactoring/Refactoring.java
+++ b/src/main/java/spoon/refactoring/Refactoring.java
@@ -36,10 +36,14 @@ public final class Refactoring {
 	 * 		New name of the element.
 	 */
 	public static void changeTypeName(final CtType<?> type, String name) {
+
+		final String typeQFN = type.getQualifiedName();
+
 		final List<CtTypeReference<?>> references = Query.getElements(type.getFactory(), new TypeFilter<CtTypeReference<?>>(CtTypeReference.class) {
 			@Override
 			public boolean matches(CtTypeReference<?> reference) {
-				return type.getQualifiedName().equals(reference.getQualifiedName());
+				String refFQN = reference.getQualifiedName();
+				return typeQFN.equals(refFQN);
 			}
 		});
 
diff --git a/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java b/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
index 96ba423af..7039feb2a 100644
--- a/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
+++ b/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java
@@ -91,9 +91,8 @@ public class SnippetCompilationHelper {
 
 		if (ret instanceof CtClass) {
 			CtClass klass = (CtClass) ret;
-			klass.setSimpleName(klass.getSimpleName().replaceAll("^[0-9]*", ""));
-			klass.setParent(ret.getFactory().Package().getRootPackage());
 			ret.getFactory().Package().getRootPackage().addType(klass);
+			klass.setSimpleName(klass.getSimpleName().replaceAll("^[0-9]*", ""));
 		}
 		return ret;
 	}
diff --git a/src/main/java/spoon/support/reflect/declaration/CtNamedElementImpl.java b/src/main/java/spoon/support/reflect/declaration/CtNamedElementImpl.java
index db4eb5fba..aefe25df5 100644
--- a/src/main/java/spoon/support/reflect/declaration/CtNamedElementImpl.java
+++ b/src/main/java/spoon/support/reflect/declaration/CtNamedElementImpl.java
@@ -43,6 +43,7 @@ public abstract class CtNamedElementImpl extends CtElementImpl implements CtName
 		if (factory instanceof FactoryImpl) {
 			simpleName = ((FactoryImpl) factory).dedup(simpleName);
 		}
+
 		this.simpleName = simpleName;
 		return (T) this;
 	}
diff --git a/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java
index e11240892..fc7c63387 100644
--- a/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java
+++ b/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java
@@ -17,13 +17,11 @@
 package spoon.support.reflect.reference;
 
 import spoon.Launcher;
-import spoon.reflect.declaration.CtElement;
 import spoon.reflect.declaration.CtEnum;
 import spoon.reflect.declaration.CtField;
 import spoon.reflect.declaration.CtType;
 import spoon.reflect.declaration.CtVariable;
 import spoon.reflect.declaration.ModifierKind;
-import spoon.reflect.declaration.ParentNotInitializedException;
 import spoon.reflect.reference.CtFieldReference;
 import spoon.reflect.reference.CtTypeReference;
 import spoon.reflect.visitor.CtVisitor;
@@ -130,35 +128,9 @@ public class CtFieldReferenceImpl<T> extends CtVariableReferenceImpl<T> implemen
 	@Override
 	@SuppressWarnings("unchecked")
 	public CtField<T> getDeclaration() {
-		final CtField<T> ctField = lookupDynamically();
-		if (ctField != null) {
-			return ctField;
-		}
 		return fromDeclaringType();
 	}
 
-	private CtField<T> lookupDynamically() {
-		CtElement element = this;
-		CtField optional = null;
-		String name = getSimpleName();
-		try {
-			do {
-				CtType type = element.getParent(CtType.class);
-				if (type == null) {
-					return null;
-				}
-				final CtField potential = type.getField(name);
-				if (potential != null) {
-					optional = potential;
-				}
-				element = type;
-			} while (optional == null);
-		} catch (ParentNotInitializedException e) {
-			return null;
-		}
-		return optional;
-	}
-
 	private CtField<T> fromDeclaringType() {
 		if (declaringType == null) {
 			return null;
diff --git a/src/test/java/spoon/test/field/FieldTest.java b/src/test/java/spoon/test/field/FieldTest.java
index f9f957fa6..cf20d7405 100644
--- a/src/test/java/spoon/test/field/FieldTest.java
+++ b/src/test/java/spoon/test/field/FieldTest.java
@@ -30,13 +30,21 @@ import java.util.List;
 
 import org.junit.Test;
 
+import spoon.Launcher;
+import spoon.reflect.code.CtExpression;
+import spoon.reflect.code.CtFieldAccess;
 import spoon.reflect.code.CtFieldRead;
+import spoon.reflect.code.CtReturn;
 import spoon.reflect.declaration.CtClass;
 import spoon.reflect.declaration.CtField;
+import spoon.reflect.declaration.CtMethod;
 import spoon.reflect.declaration.ModifierKind;
 import spoon.reflect.factory.Factory;
 import spoon.reflect.visitor.filter.TypeFilter;
+import spoon.support.reflect.eval.VisitorPartialEvaluator;
+import spoon.test.field.testclasses.A;
 import spoon.test.field.testclasses.AddFieldAtTop;
+import spoon.test.field.testclasses.BaseClass;
 
 public class FieldTest {
 	@Test
@@ -102,4 +110,38 @@ public class FieldTest {
 		first.setSimpleName(name);
 		return first;
 	}
+
+	@Test
+	public void testGetDefaultExpression() throws Exception {
+		Launcher spoon = new Launcher();
+		spoon.addInputResource("./src/test/java/spoon/test/field/testclasses/A.java");
+		spoon.addInputResource("./src/test/java/spoon/test/field/testclasses/BaseClass.java");
+		spoon.buildModel();
+
+		final CtClass<A> aClass = spoon.getFactory().Class().get(A.class);
+
+		CtClass<A.ClassB> bClass = aClass.getFactory().Class().get(A.ClassB.class);
+		List<CtMethod<?>> methods = bClass.getMethodsByName("getKey");
+
+		assertEquals(1, methods.size());
+
+		CtReturn<?> returnExpression = methods.get(0).getBody().getStatement(0);
+
+		CtFieldRead fieldRead = (CtFieldRead) returnExpression.getReturnedExpression();
+
+		assertEquals("spoon.test.field.testclasses.BaseClass.PREFIX", fieldRead.toString());
+
+		CtField<?> field = fieldRead.getVariable().getDeclaration();
+
+		CtClass<BaseClass> baseClass = aClass.getFactory().Class().get(BaseClass.class);
+		CtField<?> expectedField = baseClass.getField("PREFIX");
+
+		assertEquals(expectedField, field);
+
+		VisitorPartialEvaluator visitorPartial = new VisitorPartialEvaluator();
+
+		Object retour = visitorPartial.evaluate(methods.get(0));
+
+		assertTrue(retour != null);
+	}
 }
diff --git a/src/test/java/spoon/test/field/testclasses/A.java b/src/test/java/spoon/test/field/testclasses/A.java
new file mode 100644
index 000000000..2b414aadf
--- /dev/null
+++ b/src/test/java/spoon/test/field/testclasses/A.java
@@ -0,0 +1,15 @@
+package spoon.test.field.testclasses;
+
+/**
+ * Created by urli on 10/03/2017.
+ */
+public class A {
+
+
+    public class ClassB {
+        public final static String PREFIX = BaseClass.PREFIX + ".b";
+        public String getKey() {
+            return BaseClass.PREFIX;
+        }
+    }
+}
diff --git a/src/test/java/spoon/test/field/testclasses/BaseClass.java b/src/test/java/spoon/test/field/testclasses/BaseClass.java
new file mode 100644
index 000000000..7ffc21381
--- /dev/null
+++ b/src/test/java/spoon/test/field/testclasses/BaseClass.java
@@ -0,0 +1,5 @@
+package spoon.test.field.testclasses;
+
+public class BaseClass {
+        public final static String PREFIX = "BasePrefix";
+    }
\ No newline at end of file
diff --git a/src/test/java/spoon/test/reference/CloneReferenceTest.java b/src/test/java/spoon/test/reference/CloneReferenceTest.java
index 9b923c40a..d1e467566 100644
--- a/src/test/java/spoon/test/reference/CloneReferenceTest.java
+++ b/src/test/java/spoon/test/reference/CloneReferenceTest.java
@@ -2,8 +2,10 @@ package spoon.test.reference;
 
 import org.junit.Test;
 import spoon.Launcher;
+import spoon.refactoring.Refactoring;
 import spoon.reflect.declaration.CtClass;
 import spoon.reflect.declaration.CtElement;
+import spoon.reflect.declaration.CtField;
 import spoon.reflect.declaration.CtVariable;
 import spoon.reflect.reference.CtVariableReference;
 import spoon.reflect.visitor.CtScanner;
@@ -18,9 +20,10 @@ public class CloneReferenceTest {
 
     @Test
     public void testGetDeclarationAfterClone() throws Exception {
+        // contract: all variable references of the clone (but fields) should point to the variable of the clone
         Launcher spoon = new Launcher();
 
-        List<String> names = Arrays.asList("f1", "f2", "a", "b", "x", "field", "param", "e");
+        List<String> names = Arrays.asList("f1", "f2", "a", "b", "x", "param", "e");
         spoon.addInputResource("./src/test/resources/noclasspath/A2.java");
         spoon.getEnvironment().setComplianceLevel(8);
         spoon.getEnvironment().setNoClasspath(true);
@@ -40,11 +43,42 @@ public class CloneReferenceTest {
         // test after clone
         for (String name : names) {
             CtVariable var1 = findVariable(b, name);
-            CtVariable var2 = findReference(b, name).getDeclaration();
-            assertTrue(var1 == var2);
+            CtVariableReference refVar1 = findReference(b, name);
+            CtVariable var2 = refVar1.getDeclaration();
+            assertTrue("Var1 and var2 are not the same element", var1 == var2);
         }
     }
 
+    @Test
+    public void testGetDeclarationOfFieldAfterClone() throws Exception {
+        // contract: all field references of the clone point to the old class
+        // behaviour changed on https://github.com/INRIA/spoon/pull/1215
+        Launcher spoon = new Launcher();
+
+        String name = "field";
+        spoon.addInputResource("./src/test/resources/noclasspath/A2.java");
+        spoon.getEnvironment().setComplianceLevel(8);
+        spoon.getEnvironment().setNoClasspath(true);
+        spoon.buildModel();
+
+
+        final CtClass<Object> a = spoon.getFactory().Class().get("A2");
+        // test before clone
+        CtField oldVar1 = (CtField)findVariable(a, name);
+        CtField oldVar2 = (CtField)findReference(a, name).getDeclaration();
+        assertTrue(oldVar1 == oldVar2);
+
+        CtClass b = a.clone();
+
+        // test after clone
+        CtField var1 = (CtField)findVariable(b, name);
+        CtVariableReference refVar1 = findReference(b, name);
+        CtField var2 = (CtField)refVar1.getDeclaration();
+        assertTrue(var1 != var2);
+        assertTrue(var2 == oldVar1);
+        assertTrue(var1.getParent(CtClass.class) == b);
+    }
+
     class Finder<T> extends CtScanner {
 
         private final Class<T> c;
