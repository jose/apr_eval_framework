--- src/com/google/javascript/jscomp/MethodCompilerPass.java	2024-07-18 03:41:51.992469008 -0700
+++ src/com/google/javascript/jscomp/MethodCompilerPass.java	2024-07-18 03:41:55.403604708 -0700
@@ -99,30 +99,10 @@
    * itself or the name of a function).
    */
   private void addPossibleSignature(String name, Node node, NodeTraversal t) {
-    boolean signatureAdded = false;
     if (node.getType() == Token.FUNCTION) {
       // The node we're looking at is a function, so we can add it directly
       addSignature(name, node, t.getSourceName());
-      signatureAdded = true;
-    } else if (node.getType() == Token.NAME) {
-      String functionName = node.getString();
-      Scope.Var v = t.getScope().getVar(functionName);
-      if (v == null) {
-        if (compiler.isIdeMode()) {
-          return;
-        } else {
-          throw new IllegalStateException(
-              "VarCheck should have caught this undefined function");
-        }
-      }
-      Node function = v.getInitialValue();
-      if (function != null &&
-          function.getType() == Token.FUNCTION) {
-        addSignature(name, function, v.getInputName());
-        signatureAdded = true;
-      }
-    }
-    if (!signatureAdded) {
+    } else {
       nonMethodProperties.add(name);
     }
   }
--- src/com/google/javascript/jscomp/RenameVars.java	2024-07-18 03:41:51.993469047 -0700
+++ src/com/google/javascript/jscomp/RenameVars.java	2024-07-18 03:41:55.403604708 -0700
@@ -200,7 +200,15 @@
 
       // Check if we can rename this.
       if (!okToRenameVar(name, local)) {
+        if (local) {
           // Blindly de-uniquify for the Prototype library for issue 103.
+          String newName =
+            MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(
+                name);
+          if (!newName.equals(name)) {
+            n.setString(newName);
+          }
+        }
         return;
       }
 
