diff --git a/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java
index 692202a80..3267dd64e 100644
--- a/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java
+++ b/src/main/java/spoon/support/reflect/reference/CtTypeParameterReferenceImpl.java
@@ -19,9 +19,11 @@ package spoon.support.reflect.reference;
 import spoon.SpoonException;
 import spoon.reflect.declaration.CtElement;
 import spoon.reflect.declaration.CtFormalTypeDeclarer;
+import spoon.reflect.declaration.CtMethod;
 import spoon.reflect.declaration.CtType;
 import spoon.reflect.declaration.CtTypeParameter;
 import spoon.reflect.reference.CtActualTypeContainer;
+import spoon.reflect.reference.CtExecutableReference;
 import spoon.reflect.reference.CtIntersectionTypeReference;
 import spoon.reflect.reference.CtTypeParameterReference;
 import spoon.reflect.reference.CtTypeReference;
@@ -173,15 +175,28 @@ public class CtTypeParameterReferenceImpl extends CtTypeReferenceImpl<Object> im
 			return null;
 		}
 
+		CtElement e = this;
+		CtElement parent = getParent();
+		if (parent instanceof CtExecutableReference) {
+			CtElement parent2 = parent.getParent();
+			if (parent2 instanceof CtMethod) {
+				e = parent2;
+			} else {
+				e = ((CtExecutableReference<?>) parent).getDeclaringType().getTypeDeclaration();
+			}
+		} else {
+			e = e.getParent(CtFormalTypeDeclarer.class);
+		}
+
 		// case #1: we're a type of a method parameter, a local variable, ...
 		// the strategy is to look in the parents
 		// collecting all formal type declarers of the hierarchy
-		CtElement e = this;
-		while ((e = e.getParent(CtFormalTypeDeclarer.class)) != null) {
+		while (e != null) {
 			CtTypeParameter result = findTypeParamDeclaration((CtFormalTypeDeclarer) e, this.getSimpleName());
 			if (result != null) {
 				return result;
 			}
+			e = e.getParent(CtFormalTypeDeclarer.class);
 		}
 		return null;
 	}
diff --git a/src/test/java/spoon/test/methodreference/MethodReferenceTest.java b/src/test/java/spoon/test/methodreference/MethodReferenceTest.java
index a4f2cdf9b..300674b36 100644
--- a/src/test/java/spoon/test/methodreference/MethodReferenceTest.java
+++ b/src/test/java/spoon/test/methodreference/MethodReferenceTest.java
@@ -9,10 +9,12 @@ import spoon.reflect.CtModel;
 import spoon.reflect.code.CtExecutableReferenceExpression;
 import spoon.reflect.code.CtExpression;
 import spoon.reflect.code.CtFieldRead;
+import spoon.reflect.code.CtInvocation;
 import spoon.reflect.code.CtTypeAccess;
 import spoon.reflect.code.CtVariableRead;
 import spoon.reflect.declaration.CtClass;
 import spoon.reflect.declaration.CtMethod;
+import spoon.reflect.declaration.CtType;
 import spoon.reflect.factory.Factory;
 import spoon.reflect.reference.CtExecutableReference;
 import spoon.reflect.reference.CtTypeReference;
@@ -20,9 +22,12 @@ import spoon.reflect.visitor.Query;
 import spoon.reflect.visitor.filter.AbstractFilter;
 import spoon.reflect.visitor.filter.NameFilter;
 import spoon.reflect.visitor.filter.TypeFilter;
+import spoon.test.methodreference.testclasses.Cloud;
 import spoon.test.methodreference.testclasses.Foo;
+import spoon.testing.utils.ModelUtils;
 
 import java.io.File;
+import java.lang.reflect.Method;
 import java.util.Comparator;
 import java.util.function.Supplier;
 
@@ -30,6 +35,7 @@ import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertSame;
 import static spoon.testing.utils.ModelUtils.canBeBuilt;
 
 public class MethodReferenceTest {
@@ -197,6 +203,28 @@ public class MethodReferenceTest {
 		assertNotNull(toStringMethod.getAnnotation(overrideRef));
 		assertNotNull(toStringMethod.getReference().getOverridingExecutable());
 	}
+	
+	@Test
+	public void testGetGenericMethodFromReferene() throws Exception {
+		CtType<?> classCloud = ModelUtils.buildClass(Cloud.class);
+		CtMethod<?> ctMethod = classCloud.getMethodsByName("method").get(0);
+		CtExecutableReference<?> execRef = ctMethod.getReference();
+		Method method = execRef.getActualMethod();
+		assertNotNull(method);
+		assertEquals("method", method.getName());
+
+		CtClass<?> classSun = classCloud.getFactory().Class().get("spoon.test.methodreference.testclasses.Sun");
+//		CtExecutableReference<?> execRef2 = classSun.filterChildren(new TypeFilter<>(CtExecutableReference.class)).select(new NameFilter<>("method")).first();
+		CtExecutableReference<?> execRef2 = classSun.filterChildren(new TypeFilter<>(CtInvocation.class))
+				.select(((CtInvocation i)->i.getExecutable().getSimpleName().equals("method")))
+				.map((CtInvocation i)->i.getExecutable())
+				.first();
+		assertNotNull(execRef2);
+		Method method2 = execRef2.getActualMethod();
+		assertNotNull(method2);
+		assertEquals("method", method2.getName());
+	}
+	
 
 	private void assertTypedBy(Class<?> expected, CtTypeReference<?> type) {
 		assertEquals("Method reference must be typed.", expected, type.getActualClass());
diff --git a/src/test/java/spoon/test/methodreference/testclasses/Cloud.java b/src/test/java/spoon/test/methodreference/testclasses/Cloud.java
new file mode 100644
index 000000000..5efbc0e18
--- /dev/null
+++ b/src/test/java/spoon/test/methodreference/testclasses/Cloud.java
@@ -0,0 +1,13 @@
+package spoon.test.methodreference.testclasses;
+
+public class Cloud<T> {
+
+	void method(T param) {}
+}
+
+class Sun {
+	void foo() {
+		Cloud<String> cc = new Cloud<>();
+		cc.method("x");
+	}
+}
