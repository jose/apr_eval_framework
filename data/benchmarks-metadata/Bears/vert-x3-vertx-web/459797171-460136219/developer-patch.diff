diff --git a/vertx-web-client/src/main/java/io/vertx/ext/web/client/impl/HttpContext.java b/vertx-web-client/src/main/java/io/vertx/ext/web/client/impl/HttpContext.java
index f439f7ff0..2c1dc179b 100644
--- a/vertx-web-client/src/main/java/io/vertx/ext/web/client/impl/HttpContext.java
+++ b/vertx-web-client/src/main/java/io/vertx/ext/web/client/impl/HttpContext.java
@@ -195,11 +195,11 @@ public class HttpContext<T> {
             fail(ar.cause());
           }
         });
+        return;
       }
-    } else {
-      this.clientResponse = clientResponse;
-      fire(ClientPhase.RECEIVE_RESPONSE);
     }
+    this.clientResponse = clientResponse;
+    fire(ClientPhase.RECEIVE_RESPONSE);
   }
 
   /**
diff --git a/vertx-web-client/src/test/java/io/vertx/ext/web/client/WebClientTest.java b/vertx-web-client/src/test/java/io/vertx/ext/web/client/WebClientTest.java
index ec6daf873..7db3feaa4 100644
--- a/vertx-web-client/src/test/java/io/vertx/ext/web/client/WebClientTest.java
+++ b/vertx-web-client/src/test/java/io/vertx/ext/web/client/WebClientTest.java
@@ -1042,6 +1042,47 @@ public class WebClientTest extends HttpTestBase {
     await();
   }
 
+  @Test
+  public void testInvalidRedirection() throws Exception {
+    server.requestHandler(req -> {
+      assertEquals(HttpMethod.POST, req.method());
+      assertEquals("/redirect", req.path());
+      req.response().setStatusCode(302).putHeader("Location", "http://www.google.com").end();
+    });
+    startServer();
+    HttpRequest<Buffer> builder = client
+      .post("/redirect")
+      .followRedirects(true);
+    builder.send(onSuccess(resp -> {
+      assertEquals(302, resp.statusCode());
+      assertEquals("http://www.google.com", resp.getHeader("Location"));
+      assertNull(resp.body());
+      complete();
+    }));
+    await();
+  }
+
+  @Test
+  public void testRedirectLimit() throws Exception {
+    String location = "http://" + DEFAULT_HTTP_HOST + ":" + DEFAULT_HTTP_PORT + "/redirect";
+    server.requestHandler(req -> {
+      assertEquals(HttpMethod.GET, req.method());
+      assertEquals("/redirect", req.path());
+      req.response().setStatusCode(302).putHeader("Location", location).end();
+    });
+    startServer();
+    HttpRequest<Buffer> builder = client
+      .get("/redirect")
+      .followRedirects(true);
+    builder.send(onSuccess(resp -> {
+      assertEquals(302, resp.statusCode());
+      assertEquals(location, resp.getHeader("Location"));
+      assertNull(resp.body());
+      complete();
+    }));
+    await();
+  }
+
   @Test
   public void testVirtualHost() throws Exception {
     server.requestHandler(req -> {
