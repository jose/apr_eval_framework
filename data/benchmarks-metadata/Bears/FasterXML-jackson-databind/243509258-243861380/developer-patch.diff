diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
index 12162c57f..53e061c69 100644
--- a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
+++ b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java
@@ -111,11 +111,22 @@ public class ResolvedRecursiveType extends TypeBase
     public boolean equals(Object o) {
         if (o == this) return true;
         if (o == null) return false;
-        // Do NOT ever match unresolved references
-        if (_referencedType == null) {
+        if (o.getClass() == getClass()) {
+            // 16-Jun-2017, tatu: as per [databind#1658], can not do recursive call since
+            //    there is likely to be a cycle...
+
+            // but... true or false?
             return false;
+            
+            /*
+            // Do NOT ever match unresolved references
+            if (_referencedType == null) {
+                return false;
+            }
+            return (o.getClass() == getClass()
+                    && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));
+                    */
         }
-        return (o.getClass() == getClass()
-                && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));
+        return false;
     }
 }
diff --git a/src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java b/src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java
new file mode 100644
index 000000000..c211cd969
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/databind/type/RecursiveType1658Test.java
@@ -0,0 +1,45 @@
+package com.fasterxml.jackson.databind.type;
+
+import java.util.*;
+
+import com.fasterxml.jackson.annotation.JsonTypeInfo;
+import com.fasterxml.jackson.databind.*;
+import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
+import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
+
+public class RecursiveType1658Test extends BaseMapTest
+{
+    @SuppressWarnings("serial")
+    static class Tree<T> extends HashMap<T, Tree<T>> // implements Serializable
+    {
+        public Tree() { }
+
+        public Tree(List<T> children) {
+            this();
+            for (final T t : children) {
+                this.put(t, new Tree<T>());
+            }
+        }
+
+        public List<Tree<T>> getLeafTrees() {
+            return null;
+        }
+    }
+
+    public void testRecursive1658() throws Exception
+    {
+        Tree<String> t = new Tree<String>(Arrays.asList("hello", "world"));
+        ObjectMapper mapper = new ObjectMapper();
+
+        final TypeResolverBuilder<?> typer = new StdTypeResolverBuilder()
+                .init(JsonTypeInfo.Id.CLASS, null)
+                .inclusion(JsonTypeInfo.As.PROPERTY);
+        mapper.setDefaultTyping(typer);
+
+        String res = mapper.writeValueAsString(t);
+
+        Tree<?> tRead = mapper.readValue(res, Tree.class);
+
+        assertNotNull(tRead);
+    }
+}
