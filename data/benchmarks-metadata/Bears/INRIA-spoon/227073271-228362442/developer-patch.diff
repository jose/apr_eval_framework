diff --git a/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java b/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java
index 9db6ff169..5c89ea012 100644
--- a/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java
+++ b/src/main/java/spoon/support/reflect/declaration/CtAnnotationImpl.java
@@ -110,7 +110,8 @@ public class CtAnnotationImpl<A extends Annotation> extends CtExpressionImpl<A>
 			// Value should be converted to a CtNewArray.
 			res = getFactory().Core().createNewArray();
 			Object[] values = (Object[]) value;
-			res.setType(getFactory().Type().createArrayReference(getFactory().Type().createReference(values[0].getClass())));
+
+			res.setType(getFactory().Type().createArrayReference(getFactory().Type().createReference(value.getClass().getComponentType())));
 			for (Object o : values) {
 				((CtNewArray) res).addElement(convertValueToExpression(o));
 			}
diff --git a/src/test/java/spoon/test/annotation/AnnotationTest.java b/src/test/java/spoon/test/annotation/AnnotationTest.java
index e75f2dc6e..fbb391d4e 100644
--- a/src/test/java/spoon/test/annotation/AnnotationTest.java
+++ b/src/test/java/spoon/test/annotation/AnnotationTest.java
@@ -67,10 +67,13 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.notNullValue;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static spoon.testing.utils.ModelUtils.buildClass;
 import static spoon.testing.utils.ModelUtils.canBeBuilt;
@@ -927,4 +930,23 @@ public class AnnotationTest {
 
 		assertEquals("Annotation should be @spoon.test.annotation.testclasses.PortRange", "spoon.test.annotation.testclasses.PortRange", annotation.getAnnotationType().getQualifiedName());
 	}
+
+	@Test
+	public void annotationAddValue() {
+		Launcher spoon = new Launcher();
+		spoon.addInputResource("./src/test/java/spoon/test/annotation/testclasses/Bar.java");
+		spoon.buildModel();
+
+		factory = spoon.getFactory();
+
+		List<CtMethod> methods = factory.getModel().getElements(new NameFilter<CtMethod>("bidule"));
+
+		assertThat(methods.size(), is(1));
+
+		CtAnnotation anno1 = factory.Annotation().annotate(methods.get(0), TypeAnnotation.class).addValue("params", new String[] { "test"});
+		assertThat(anno1.getValue("params").getType(), is(factory.Type().createReference(String[].class)));
+
+		CtAnnotation anno = factory.Annotation().annotate(methods.get(0), TypeAnnotation.class).addValue("params", new String[0]);
+		assertThat(anno.getValue("params").getType(), is(factory.Type().createReference(String[].class))); 
+	}
 }
diff --git a/src/test/java/spoon/test/annotation/testclasses/Bar.java b/src/test/java/spoon/test/annotation/testclasses/Bar.java
new file mode 100644
index 000000000..609c22138
--- /dev/null
+++ b/src/test/java/spoon/test/annotation/testclasses/Bar.java
@@ -0,0 +1,8 @@
+package spoon.test.annotation.testclasses;
+
+/**
+ * Created by urli on 03/05/2017.
+ */
+public class Bar {
+    public void bidule() {}
+}
