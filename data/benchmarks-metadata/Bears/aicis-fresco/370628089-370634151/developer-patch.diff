diff --git a/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt128.java b/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt128.java
index 8f16046e9..4a69b3589 100644
--- a/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt128.java
+++ b/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt128.java
@@ -49,7 +49,6 @@ public class CompUInt128 implements CompUInt<UInt64, UInt64, CompUInt128> {
    */
   public CompUInt128(BigInteger value) {
     this(value.shiftRight(64).longValue(), value.shiftRight(32).intValue(), value.intValue());
-//    this(value.toByteArray(), true);
   }
 
   CompUInt128(long high, int mid, int low) {
diff --git a/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt96.java b/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt96.java
index d9c15a87d..338f6dc18 100644
--- a/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt96.java
+++ b/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt96.java
@@ -33,7 +33,7 @@ public class CompUInt96 implements CompUInt<UInt64, UInt32, CompUInt96> {
   }
 
   CompUInt96(BigInteger value) {
-    this(value.toByteArray());
+    this(value.shiftRight(64).intValue(), value.shiftRight(32).intValue(), value.intValue());
   }
 
   CompUInt96(UInt64 value) {
diff --git a/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt96Factory.java b/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt96Factory.java
index 1ae2a2c40..db3eea4c2 100644
--- a/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt96Factory.java
+++ b/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUInt96Factory.java
@@ -2,6 +2,7 @@ package dk.alexandra.fresco.suite.spdz2k.datatypes;
 
 import dk.alexandra.fresco.framework.network.serializers.ByteSerializer;
 import dk.alexandra.fresco.suite.spdz2k.util.UIntSerializer;
+import java.math.BigInteger;
 import java.security.SecureRandom;
 
 public class CompUInt96Factory implements CompUIntFactory<CompUInt96> {
@@ -13,6 +14,11 @@ public class CompUInt96Factory implements CompUIntFactory<CompUInt96> {
     return new CompUInt96(bytes);
   }
 
+  @Override
+  public CompUInt96 createFromBigInteger(BigInteger value) {
+    return value == null ? null : new CompUInt96(value);
+  }
+
   @Override
   public CompUInt96 createRandom() {
     byte[] bytes = new byte[12];
diff --git a/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUIntFactory.java b/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUIntFactory.java
index dae78427e..0bb6c0c10 100644
--- a/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUIntFactory.java
+++ b/suite/spdz2k/src/main/java/dk/alexandra/fresco/suite/spdz2k/datatypes/CompUIntFactory.java
@@ -92,7 +92,7 @@ public interface CompUIntFactory<CompT extends CompUInt<?, ?, CompT>> extends OI
    * Creates element whose value is zero.
    */
   default CompT zero() {
-    return createFromBytes(new byte[getCompositeBitLength() / Byte.SIZE]);
+    return createFromBigInteger(BigInteger.ZERO);
   }
 
   default CompT one() {
diff --git a/suite/spdz2k/src/test/java/dk/alexandra/fresco/suite/spdz2k/datatypes/TestCompUInt96.java b/suite/spdz2k/src/test/java/dk/alexandra/fresco/suite/spdz2k/datatypes/TestCompUInt96.java
index 9698c63d9..d9dbf2d66 100644
--- a/suite/spdz2k/src/test/java/dk/alexandra/fresco/suite/spdz2k/datatypes/TestCompUInt96.java
+++ b/suite/spdz2k/src/test/java/dk/alexandra/fresco/suite/spdz2k/datatypes/TestCompUInt96.java
@@ -58,6 +58,18 @@ public class TestCompUInt96 {
         twoTo96.subtract(BigInteger.ONE),
         new CompUInt96(twoTo96.subtract(BigInteger.ONE)).toBigInteger()
     );
+    assertEquals(
+        BigInteger.valueOf(-1).mod(twoTo96),
+        new CompUInt96(BigInteger.valueOf(-1)).toBigInteger()
+    );
+    assertEquals(
+        BigInteger.valueOf(-2).mod(twoTo96),
+        new CompUInt96(BigInteger.valueOf(-2)).toBigInteger()
+    );
+    assertEquals(
+        twoTo96.subtract(BigInteger.ONE).negate().mod(twoTo96),
+        new CompUInt96(twoTo96.subtract(BigInteger.ONE).negate()).toBigInteger()
+    );
   }
 
   @Test
