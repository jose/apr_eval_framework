--- src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	2023-12-05 20:54:12.040145918 +0000
+++ src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	2023-12-05 20:54:15.703183993 +0000
@@ -294,7 +294,11 @@
             }
         }
         if (JAR.equalsIgnoreCase(archiverName)) {
+            if (entryEncoding != null) {
+                return new JarArchiveOutputStream(out, entryEncoding);
+            } else {
                 return new JarArchiveOutputStream(out);
+            }
         }
         if (CPIO.equalsIgnoreCase(archiverName)) {
             if (entryEncoding != null) {
@@ -357,7 +361,11 @@
                     return new CpioArchiveInputStream(in);
                 }
             } else if (ArjArchiveInputStream.matches(signature, signatureLength)) {
+                if (entryEncoding != null) {
+                    return new ArjArchiveInputStream(in, entryEncoding);
+                } else {
                     return new ArjArchiveInputStream(in);
+                }
             } else if (SevenZFile.matches(signature, signatureLength)) {
                 throw new StreamingNotSupportedException(SEVEN_Z);
             }
--- src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	2023-12-05 20:54:12.040517957 +0000
+++ src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java	2023-12-05 20:54:15.703486917 +0000
@@ -94,6 +94,7 @@
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     /**
      * Construct the cpio input stream with a blocksize of {@link
@@ -152,6 +153,7 @@
     public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {
         this.in = in;
         this.blockSize = blockSize;
+        this.encoding = encoding;
         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     }
 
--- src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java	2023-12-05 20:54:12.040886532 +0000
+++ src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java	2023-12-05 20:54:15.703783850 +0000
@@ -95,6 +95,7 @@
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     /**
      * Construct the cpio output stream with a specified format, a
@@ -159,6 +160,7 @@
         }
         this.entryFormat = format;
         this.blockSize = blockSize;
+        this.encoding = encoding;
         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
     }
 
--- src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java	2023-12-05 20:54:12.041273916 +0000
+++ src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java	2023-12-05 20:54:15.704079686 +0000
@@ -77,6 +77,7 @@
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     /**
      * Constructor using the platform's default encoding for file
@@ -101,6 +102,7 @@
         throws ArchiveException {
         this.raw = new TapeInputStream(is);
         this.hasHitEOF = false;
+        this.encoding = encoding;
         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
 
         try {
--- src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	2023-12-05 20:54:12.042247719 +0000
+++ src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	2023-12-05 20:54:15.704989762 +0000
@@ -76,6 +76,7 @@
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     /**
      * Constructor for TarInputStream.
@@ -139,6 +140,7 @@
                                  String encoding) {
         this.is = is;
         this.hasHitEOF = false;
+        this.encoding = encoding;
         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.recordSize = recordSize;
         this.blockSize = blockSize;
--- src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	2023-12-05 20:54:12.042700411 +0000
+++ src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	2023-12-05 20:54:15.705336691 +0000
@@ -87,6 +87,7 @@
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     private boolean addPaxHeadersForNonAsciiNames = false;
     private static final ZipEncoding ASCII =
@@ -152,6 +153,7 @@
     public TarArchiveOutputStream(OutputStream os, int blockSize,
                                   int recordSize, String encoding) {
         out = new CountingOutputStream(os);
+        this.encoding = encoding;
         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
 
         this.assemLen = 0;
--- src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	2023-12-05 20:54:12.043200195 +0000
+++ src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	2023-12-05 20:54:15.705801188 +0000
@@ -62,6 +62,7 @@
     private final ZipEncoding zipEncoding;
 
     // the provided encoding (for unit tests)
+    final String encoding;
 
     /** Whether to look for and use Unicode extra fields. */
     private final boolean useUnicodeExtraFields;
@@ -181,6 +182,7 @@
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
+        this.encoding = encoding;
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
         in = new PushbackInputStream(inputStream, buf.capacity());
