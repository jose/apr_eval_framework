--- src/com/google/javascript/jscomp/Scope.java	2023-12-05 20:03:55.261633822 +0000
+++ src/com/google/javascript/jscomp/Scope.java	2023-12-05 20:03:59.498498534 +0000
@@ -565,6 +565,9 @@
   /**
    * Return an iterable over all of the variables declared in this scope.
    */
+  Iterable<Var> getVarIterable() {
+    return vars.values();
+  }
 
   @Override
   public Iterable<Var> getReferences(Var var) {
--- src/com/google/javascript/jscomp/ScopedAliases.java	2023-12-05 20:03:55.262078731 +0000
+++ src/com/google/javascript/jscomp/ScopedAliases.java	2023-12-05 20:03:59.498790071 +0000
@@ -223,6 +223,7 @@
       if (n != null && isCallToScopeMethod(n)) {
         transformation = transformationHandler.logAliasTransformation(
             n.getSourceFileName(), getSourceRegion(n));
+        findAliases(t);
       }
     }
 
@@ -268,8 +269,28 @@
       hasErrors = true;
     }
 
+    private void findAliases(NodeTraversal t) {
+      Scope scope = t.getScope();
+      for (Var v : scope.getVarIterable()) {
+        Node n = v.getNode();
+        int type = n.getType();
+        Node parent = n.getParent();
+        if (parent.getType() == Token.VAR) {
+          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+            String name = n.getString();
+            Var aliasVar = scope.getVar(name);
+            aliases.put(name, aliasVar);
 
+            String qualifiedName =
+                aliasVar.getInitialValue().getQualifiedName();
+            transformation.addAlias(name, qualifiedName);
+          } else {
             // TODO(robbyw): Support using locals for private variables.
+            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
+          }
+        }
+      }
+    }
 
     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {
       if (preprocessorSymbolTable != null) {
@@ -300,31 +321,32 @@
         validateScopeCall(t, n, n.getParent());
       }
 
+      if (t.getScopeDepth() < 2) {
+        return;
+      }
 
+      int type = n.getType();
+      Var aliasVar = null;
+      if (type == Token.NAME) {
+        String name = n.getString();
+        Var lexicalVar = t.getScope().getVar(n.getString());
+        if (lexicalVar != null && lexicalVar == aliases.get(name)) {
+          aliasVar = lexicalVar;
+        }
+      }
 
       // Validate the top level of the goog.scope block.
       if (t.getScopeDepth() == 2) {
-        int type = n.getType();
-        if (type == Token.NAME && parent.getType() == Token.VAR) {
-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
-            String name = n.getString();
-            Var aliasVar = t.getScope().getVar(name);
-            aliases.put(name, aliasVar);
+        if (aliasVar != null && NodeUtil.isLValue(n)) {
+          if (aliasVar.getNode() == n) {
             aliasDefinitionsInOrder.add(n);
 
-            String qualifiedName =
-                aliasVar.getInitialValue().getQualifiedName();
-            transformation.addAlias(name, qualifiedName);
             // Return early, to ensure that we don't record a definition
             // twice.
             return;
           } else {
-            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
-          }
-        }
-        if (type == Token.NAME && NodeUtil.isAssignmentOp(parent) &&
-            n == parent.getFirstChild()) {
             report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());
+          }
         }
 
         if (type == Token.RETURN) {
@@ -339,11 +361,7 @@
       // Validate all descendent scopes of the goog.scope block.
       if (t.getScopeDepth() >= 2) {
         // Check if this name points to an alias.
-        if (n.getType() == Token.NAME) {
-          String name = n.getString();
-          Var aliasVar = aliases.get(name);
-          if (aliasVar != null &&
-              t.getScope().getVar(name) == aliasVar) {
+        if (aliasVar != null) {
           // Note, to support the transitive case, it's important we don't
           // clone aliasedNode here.  For example,
           // var g = goog; var d = g.dom; d.createElement('DIV');
@@ -352,7 +370,6 @@
           // with <code>g.dom.createElement('DIV')</code>.
           Node aliasedNode = aliasVar.getInitialValue();
           aliasUsages.add(new AliasedNode(n, aliasedNode));
-          }
         }
 
         JSDocInfo info = n.getJSDocInfo();
