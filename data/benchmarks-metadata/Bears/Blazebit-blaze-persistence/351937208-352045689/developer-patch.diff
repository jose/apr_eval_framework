diff --git a/core/testsuite/src/test/java/com/blazebit/persistence/testsuite/Issue521Test.java b/core/testsuite/src/test/java/com/blazebit/persistence/testsuite/Issue521Test.java
index bd7b249c9..43747c83e 100644
--- a/core/testsuite/src/test/java/com/blazebit/persistence/testsuite/Issue521Test.java
+++ b/core/testsuite/src/test/java/com/blazebit/persistence/testsuite/Issue521Test.java
@@ -28,12 +28,12 @@ public class Issue521Test extends AbstractCoreTest {
     @Test
     public void secondaryTableWithJoinedInheritanceTest() {
         SecondaryTableEntitySub b = new SecondaryTableEntitySub();
-        b.setB(4l);
-        b.setC(5l);
+        b.setB(4L);
+        b.setC(5L);
         em.persist(b);
 
         CriteriaBuilder<SecondaryTableEntitySub> criteria = cbf.create(em, SecondaryTableEntitySub.class, "d");
-        criteria.where("d.c").eq(5l);
+        criteria.where("d.c").eq(5L);
 
         assertFalse(criteria.getResultList().isEmpty());
     }
diff --git a/integration/hibernate-base/src/main/java/com/blazebit/persistence/integration/hibernate/base/HibernateJpaProvider.java b/integration/hibernate-base/src/main/java/com/blazebit/persistence/integration/hibernate/base/HibernateJpaProvider.java
index 5d8118500..d5880011e 100644
--- a/integration/hibernate-base/src/main/java/com/blazebit/persistence/integration/hibernate/base/HibernateJpaProvider.java
+++ b/integration/hibernate-base/src/main/java/com/blazebit/persistence/integration/hibernate/base/HibernateJpaProvider.java
@@ -506,12 +506,19 @@ public class HibernateJpaProvider implements JpaProvider {
         }
 
         // In this case, the property might represent a formula
-        if (columnNames.length == 1 && columnNames[0] == null) {
+        boolean isFormula = columnNames.length == 1 && columnNames[0] == null;
+        boolean isSubselect = tables.length == 1 && tables[0] == null;
+
+        if (isFormula || isSubselect) {
             Type propertyType = entityPersister.getPropertyType(attributeName);
             long length;
             int precision;
             int scale;
             try {
+                if (propertyType instanceof org.hibernate.type.EntityType) {
+                    propertyType = ((org.hibernate.type.EntityType) propertyType).getIdentifierOrUniqueKeyType(sfi);
+                }
+
                 Method m = Type.class.getMethod("dictatedSizes", Mapping.class);
                 Object size = ((Object[]) m.invoke(propertyType, sfi))[0];
                 length =    (long) size.getClass().getMethod("getLength").invoke(size);
