--- src/com/google/javascript/rhino/jstype/ArrowType.java	2023-12-05 20:05:01.848339905 +0000
+++ src/com/google/javascript/rhino/jstype/ArrowType.java	2023-12-05 20:05:05.993385522 +0000
@@ -174,7 +174,7 @@
    * @return True if our parameter spec is equal to {@code that}'s parameter
    *     spec.
    */
-  boolean hasEqualParameters(ArrowType that, boolean tolerateUnknowns) {
+  boolean hasEqualParameters(ArrowType that, EquivalenceMethod eqMethod) {
     Node thisParam = parameters.getFirstChild();
     Node otherParam = that.parameters.getFirstChild();
     while (thisParam != null && otherParam != null) {
@@ -184,7 +184,7 @@
         // Both parameter lists give a type for this param, it should be equal
         if (otherParamType != null &&
             !thisParamType.checkEquivalenceHelper(
-                otherParamType, tolerateUnknowns)) {
+                otherParamType, eqMethod)) {
           return false;
         }
       } else {
@@ -201,12 +201,12 @@
   }
 
   boolean checkArrowEquivalenceHelper(
-      ArrowType that, boolean tolerateUnknowns) {
+      ArrowType that, EquivalenceMethod eqMethod) {
     // Please keep this method in sync with the hashCode() method below.
-    if (!returnType.checkEquivalenceHelper(that.returnType, tolerateUnknowns)) {
+    if (!returnType.checkEquivalenceHelper(that.returnType, eqMethod)) {
       return false;
     }
-    return hasEqualParameters(that, tolerateUnknowns);
+    return hasEqualParameters(that, eqMethod);
   }
 
   @Override
Only in src/com/google/javascript/rhino/jstype: EquivalenceMethod.java
--- src/com/google/javascript/rhino/jstype/FunctionType.java	2023-12-05 20:05:01.848525406 +0000
+++ src/com/google/javascript/rhino/jstype/FunctionType.java	2023-12-05 20:05:05.994417395 +0000
@@ -789,7 +789,7 @@
   private FunctionType tryMergeFunctionPiecewise(
       FunctionType other, boolean leastSuper) {
     Node newParamsNode = null;
-    if (call.hasEqualParameters(other.call, false)) {
+    if (call.hasEqualParameters(other.call, EquivalenceMethod.IDENTITY)) {
       newParamsNode = call.parameters;
     } else {
       // If the parameters are not equal, don't try to merge them.
@@ -887,7 +887,7 @@
    * have signatures, two interfaces are equal if their names match.
    */
   boolean checkFunctionEquivalenceHelper(
-      FunctionType that, boolean tolerateUnknowns) {
+      FunctionType that, EquivalenceMethod eqMethod) {
     if (isConstructor()) {
       if (that.isConstructor()) {
         return this == that;
@@ -905,8 +905,8 @@
     }
 
     return typeOfThis.checkEquivalenceHelper(
-        that.typeOfThis, tolerateUnknowns) &&
-        call.checkArrowEquivalenceHelper(that.call, tolerateUnknowns);
+        that.typeOfThis, eqMethod) &&
+        call.checkArrowEquivalenceHelper(that.call, eqMethod);
   }
 
   @Override
@@ -915,7 +915,8 @@
   }
 
   public boolean hasEqualCallType(FunctionType otherType) {
-    return this.call.checkArrowEquivalenceHelper(otherType.call, false);
+    return this.call.checkArrowEquivalenceHelper(
+        otherType.call, EquivalenceMethod.IDENTITY);
   }
 
   /**
--- src/com/google/javascript/rhino/jstype/JSType.java	2023-12-05 20:05:01.993580637 +0000
+++ src/com/google/javascript/rhino/jstype/JSType.java	2023-12-05 20:05:05.994999075 +0000
@@ -489,7 +489,7 @@
    * Checks if two types are equivalent.
    */
   public final boolean isEquivalentTo(JSType that) {
-    return checkEquivalenceHelper(that, false);
+    return checkEquivalenceHelper(that, EquivalenceMethod.IDENTITY);
   }
 
   /**
@@ -497,7 +497,7 @@
    * @see EquivalenceMethod
    */
   public final boolean isInvariant(JSType that) {
-    return checkEquivalenceHelper(that, false);
+    return checkEquivalenceHelper(that, EquivalenceMethod.INVARIANT);
   }
 
   /**
@@ -511,13 +511,13 @@
    *     unknowns</a>
    */
   public final boolean differsFrom(JSType that) {
-    return !checkEquivalenceHelper(that, true);
+    return !checkEquivalenceHelper(that, EquivalenceMethod.DATA_FLOW);
   }
 
   /**
    * An equivalence visitor.
    */
-  boolean checkEquivalenceHelper(JSType that, boolean tolerateUnknowns) {
+  boolean checkEquivalenceHelper(JSType that, EquivalenceMethod eqMethod) {
     if (this == that) {
       return true;
     }
@@ -525,9 +525,11 @@
     boolean thisUnknown = isUnknownType();
     boolean thatUnknown = that.isUnknownType();
     if (thisUnknown || thatUnknown) {
-      if (tolerateUnknowns) {
+      if (eqMethod == EquivalenceMethod.INVARIANT) {
         // If we're checking for invariance, the unknown type is invariant
         // with everyone.
+        return true;
+      } else if (eqMethod == EquivalenceMethod.DATA_FLOW) {
         // If we're checking data flow, then two types are the same if they're
         // both unknown.
         return thisUnknown && thatUnknown;
@@ -542,17 +544,17 @@
 
     if (isUnionType() && that.isUnionType()) {
       return this.toMaybeUnionType().checkUnionEquivalenceHelper(
-          that.toMaybeUnionType(), tolerateUnknowns);
+          that.toMaybeUnionType(), eqMethod);
     }
 
     if (isFunctionType() && that.isFunctionType()) {
       return this.toMaybeFunctionType().checkFunctionEquivalenceHelper(
-          that.toMaybeFunctionType(), tolerateUnknowns);
+          that.toMaybeFunctionType(), eqMethod);
     }
 
     if (isRecordType() && that.isRecordType()) {
       return this.toMaybeRecordType().checkRecordEquivalenceHelper(
-          that.toMaybeRecordType(), tolerateUnknowns);
+          that.toMaybeRecordType(), eqMethod);
     }
 
     ParameterizedType thisParamType = toMaybeParameterizedType();
@@ -562,14 +564,14 @@
       boolean paramsMatch = false;
       if (thisParamType != null && thatParamType != null) {
         paramsMatch = thisParamType.getParameterType().checkEquivalenceHelper(
-            thatParamType.getParameterType(), tolerateUnknowns);
-      } else if (tolerateUnknowns) {
+            thatParamType.getParameterType(), eqMethod);
+      } else if (eqMethod == EquivalenceMethod.IDENTITY) {
+        paramsMatch = false;
+      } else {
         // If one of the type parameters is unknown, but the other is not,
         // then we consider these the same for the purposes of data flow
         // and invariance.
         paramsMatch = true;
-      } else {
-        paramsMatch = false;
       }
 
       JSType thisRootType = thisParamType == null ?
@@ -577,7 +579,7 @@
       JSType thatRootType = thatParamType == null ?
           that : thatParamType.getReferencedTypeInternal();
       return paramsMatch &&
-          thisRootType.checkEquivalenceHelper(thatRootType, tolerateUnknowns);
+          thisRootType.checkEquivalenceHelper(thatRootType, eqMethod);
     }
 
     if (isNominalType() && that.isNominalType()) {
@@ -589,13 +591,13 @@
     if (this instanceof ProxyObjectType) {
       return ((ProxyObjectType) this)
           .getReferencedTypeInternal().checkEquivalenceHelper(
-              that, tolerateUnknowns);
+              that, eqMethod);
     }
 
     if (that instanceof ProxyObjectType) {
       return checkEquivalenceHelper(
           ((ProxyObjectType) that).getReferencedTypeInternal(),
-          tolerateUnknowns);
+          eqMethod);
     }
 
     // Relies on the fact that for the base {@link JSType}, only one
--- src/com/google/javascript/rhino/jstype/RecordType.java	2023-12-05 20:05:01.993957388 +0000
+++ src/com/google/javascript/rhino/jstype/RecordType.java	2023-12-05 20:05:05.995500086 +0000
@@ -115,7 +115,7 @@
   }
 
   boolean checkRecordEquivalenceHelper(
-      RecordType otherRecord, boolean tolerateUnknowns) {
+      RecordType otherRecord, EquivalenceMethod eqMethod) {
     Set<String> keySet = properties.keySet();
     Map<String, JSType> otherProps = otherRecord.properties;
     if (!otherProps.keySet().equals(keySet)) {
@@ -123,7 +123,7 @@
     }
     for (String key : keySet) {
       if (!otherProps.get(key).checkEquivalenceHelper(
-              properties.get(key), tolerateUnknowns)) {
+              properties.get(key), eqMethod)) {
         return false;
       }
     }
@@ -201,8 +201,7 @@
           JSType altPropType = alt.getPropertyType(propName);
           if (altPropType != null && !alt.isEquivalentTo(this) &&
               alt.isSubtype(that) &&
-              (propType.isUnknownType() || altPropType.isUnknownType() ||
-                  altPropType.isEquivalentTo(propType))) {
+              propType.isInvariant(altPropType)) {
             builder.addAlternate(alt);
           }
         }
@@ -265,7 +264,6 @@
 
       JSType propA = typeA.getPropertyType(property);
       JSType propB = typeB.getPropertyType(property);
-      if (!propA.isUnknownType() && !propB.isUnknownType()) {
       if (typeA.isPropertyTypeDeclared(property)) {
         // If one declared property isn't invariant,
         // then the whole record isn't covariant.
@@ -277,7 +275,6 @@
         // then the whole record isn't covariant.
         if (!propA.isSubtype(propB)) {
           return false;
-          }
         }
       }
     }
--- src/com/google/javascript/rhino/jstype/UnionType.java	2023-12-05 20:05:01.994301834 +0000
+++ src/com/google/javascript/rhino/jstype/UnionType.java	2023-12-05 20:05:05.995908691 +0000
@@ -331,22 +331,22 @@
    * and all alternates are equal.
    */
   boolean checkUnionEquivalenceHelper(
-      UnionType that, boolean tolerateUnknowns) {
-    if (!tolerateUnknowns
+      UnionType that, EquivalenceMethod eqMethod) {
+    if (eqMethod == EquivalenceMethod.IDENTITY
         && alternates.size() != that.alternates.size()) {
       return false;
     }
     for (JSType alternate : that.alternates) {
-      if (!hasAlternate(alternate, tolerateUnknowns)) {
+      if (!hasAlternate(alternate, eqMethod)) {
         return false;
       }
     }
     return true;
   }
 
-  private boolean hasAlternate(JSType type, boolean tolerateUnknowns) {
+  private boolean hasAlternate(JSType type, EquivalenceMethod eqMethod) {
     for (JSType alternate : alternates) {
-      if (alternate.checkEquivalenceHelper(type, tolerateUnknowns)) {
+      if (alternate.checkEquivalenceHelper(type, eqMethod)) {
         return true;
       }
     }
