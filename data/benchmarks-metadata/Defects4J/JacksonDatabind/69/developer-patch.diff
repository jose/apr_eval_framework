--- src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java	2023-12-05 21:08:44.240672728 +0000
+++ src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java	2023-12-05 21:08:46.744139155 +0000
@@ -162,18 +162,20 @@
             SettableBeanProperty[] injectables)
     {
         if (creator.getParameterType(0).isCollectionLikeType()) {
-            verifyNonDup(creator, C_ARRAY_DELEGATE, explicit);
+            if (verifyNonDup(creator, C_ARRAY_DELEGATE, explicit)) {
                 _arrayDelegateArgs = injectables;
+            }
         } else {
-            verifyNonDup(creator, C_DELEGATE, explicit);
+            if (verifyNonDup(creator, C_DELEGATE, explicit)) {
                 _delegateArgs = injectables;
+            }
         }
     }
     
     public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit,
             SettableBeanProperty[] properties)
     {
-        verifyNonDup(creator, C_PROPS, explicit);
+        if (verifyNonDup(creator, C_PROPS, explicit)) {
             // Better ensure we have no duplicate names either...
             if (properties.length > 1) {
                 HashMap<String,Integer> names = new HashMap<String,Integer>();
@@ -192,6 +194,7 @@
                 }
             }
             _propertyBasedArgs = properties;
+        }
     }
 
     public void addIncompeteParameter(AnnotatedParameter parameter) {
@@ -296,7 +299,7 @@
     /**
      * @return True if specified Creator is to be used
      */
-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
+    protected boolean verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
     {
         final int mask = (1 << typeIndex);
         _hasNonDefaultCreator = true;
@@ -307,7 +310,7 @@
             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
                 // but skip, if new one not annotated
                 if (!explicit) {
-                    return;
+                    return false;
                 }
                 // both explicit: verify
                 verify = true;
@@ -329,7 +332,7 @@
                 // otherwise, which one to choose?
                 if (newType.isAssignableFrom(oldType)) {
                     // new type more generic, use old
-                    return;
+                    return false;
                 }
                 // new type more specific, use it
             }
@@ -338,6 +341,7 @@
             _explicitCreators |= mask;
         }
         _creators[typeIndex] = _fixAccess(newOne);
+        return true;
     }
 
     /*
