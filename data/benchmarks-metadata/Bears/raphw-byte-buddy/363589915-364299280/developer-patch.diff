diff --git a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/bytecode/member/MethodInvocation.java b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/bytecode/member/MethodInvocation.java
index cd9296dbd..95fedb843 100644
--- a/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/bytecode/member/MethodInvocation.java
+++ b/byte-buddy-dep/src/main/java/net/bytebuddy/implementation/bytecode/member/MethodInvocation.java
@@ -317,9 +317,10 @@ public enum MethodInvocation {
         public StackManipulation virtual(TypeDescription invocationTarget) {
             if (methodDescription.isPrivate() || methodDescription.isConstructor() || methodDescription.isStatic()) {
                 return Illegal.INSTANCE;
-            }
-            if (invocationTarget.isInterface()) {
-                return INTERFACE.new Invocation(methodDescription, invocationTarget);
+            } else if (invocationTarget.isInterface()) {
+                return methodDescription.getDeclaringType().represents(Object.class)
+                        ? this
+                        : INTERFACE.new Invocation(methodDescription, invocationTarget);
             } else {
                 return VIRTUAL.new Invocation(methodDescription, invocationTarget);
             }
diff --git a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bytecode/member/MethodInvocationTest.java b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bytecode/member/MethodInvocationTest.java
index 668dc376f..badcebcc4 100644
--- a/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bytecode/member/MethodInvocationTest.java
+++ b/byte-buddy-dep/src/test/java/net/bytebuddy/implementation/bytecode/member/MethodInvocationTest.java
@@ -181,6 +181,14 @@ public class MethodInvocationTest {
         assertInvocation(MethodInvocation.invoke(methodDescription).virtual(rawOtherType), Opcodes.INVOKEINTERFACE, BAZ, true);
     }
 
+    @Test
+    public void testExplicitlyVirtualMethodInvocationOfInterfaceOfObjectMethod() throws Exception {
+        when(declaringType.isAssignableFrom(rawOtherType)).thenReturn(true);
+        when(rawOtherType.isInterface()).thenReturn(true);
+        when(declaringType.represents(Object.class)).thenReturn(true);
+        assertInvocation(MethodInvocation.invoke(methodDescription).virtual(rawOtherType), Opcodes.INVOKEVIRTUAL, FOO, false);
+    }
+
     @Test
     public void testStaticVirtualInvocation() throws Exception {
         when(methodDescription.isStatic()).thenReturn(true);
