diff --git a/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java b/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java
index 564d67f1a..41edede7b 100644
--- a/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java
+++ b/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java
@@ -73,6 +73,7 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {
 	protected CtTypeReference<?> targetType;
 	private Map<String, Boolean> namesPresentInJavaLang = new HashMap<>();
 	private Set<String> fieldAndMethodsNames = new HashSet<String>();
+	private Set<CtTypeReference> exploredReferences = new HashSet<>(); // list of explored references
 
 	@Override
 	public <T> void visitCtFieldRead(CtFieldRead<T> fieldRead) {
@@ -248,10 +249,20 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {
 		}
 	}
 
+	private boolean isThereAnotherClassWithSameNameInAnotherPackage(CtTypeReference<?> ref) {
+		for (CtTypeReference typeref : this.exploredReferences) {
+			if (typeref.getSimpleName().equals(ref.getSimpleName()) && !typeref.getQualifiedName().equals(ref.getQualifiedName())) {
+				return true;
+			}
+		}
+		return false;
+	}
+
 	/**
 	 * Adds a type to the classImports.
 	 */
 	protected boolean addClassImport(CtTypeReference<?> ref) {
+		this.exploredReferences.add(ref);
 		if (ref == null) {
 			return false;
 		}
@@ -279,6 +290,10 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {
 			return false;
 		}
 
+		if (this.isThereAnotherClassWithSameNameInAnotherPackage(ref)) {
+			return false;
+		}
+
 		// we want to be sure that we are not importing a class because a static field or method we already imported
 		// moreover we make exception for same package classes to avoid problems in FQN mode
 
@@ -346,8 +361,7 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {
 				}
 			}
 		}
-		//note: we must add the type refs from the same package too, to assure that isImported(typeRef) returns true for them
-		//these type refs are removed in #getClassImports()
+
 		classImports.put(ref.getSimpleName(), ref);
 		return true;
 	}
diff --git a/src/test/java/spoon/test/ctClass/CtClassTest.java b/src/test/java/spoon/test/ctClass/CtClassTest.java
index 4e085df61..93ba6558b 100644
--- a/src/test/java/spoon/test/ctClass/CtClassTest.java
+++ b/src/test/java/spoon/test/ctClass/CtClassTest.java
@@ -1,10 +1,15 @@
 package spoon.test.ctClass;
 
+
+import static org.hamcrest.CoreMatchers.notNullValue;
+
 import static org.hamcrest.core.Is.is;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
+
 import static spoon.testing.utils.ModelUtils.build;
 import static spoon.testing.utils.ModelUtils.buildClass;
 import static spoon.testing.utils.ModelUtils.canBeBuilt;
@@ -155,4 +160,23 @@ public class CtClassTest {
 
 		assertThat(type2, is("com.cristal.ircica.applicationcolis.userinterface.fragments.CompletableFragment"));
 	}
+
+	@Test
+	public void testDefaultConstructorAreOk() throws Exception {
+		// contract: When we specify a superclass which is declared in an interface and
+		// where the visibility is okay, we must use it.
+
+		final Launcher launcher = new Launcher();
+		launcher.addInputResource("./src/test/java/spoon/test/ctClass/testclasses/issue1306");
+		launcher.setSourceOutputDirectory("./target/issue1306");
+		launcher.getEnvironment().setNoClasspath(false);
+		launcher.getEnvironment().setShouldCompile(true);
+		launcher.getEnvironment().setAutoImports(true);
+		launcher.run();
+
+		final CtClass<Object> aClass = launcher.getFactory().Class().get("spoon.test.ctClass.testclasses.issue1306.internal.BooleanArraysBaseTest");
+		assertThat(aClass, notNullValue());
+
+		canBeBuilt("./target/issue1306", 8, true);
+	}
 }
diff --git a/src/test/java/spoon/test/ctClass/testclasses/issue1306/internal/BooleanArrays.java b/src/test/java/spoon/test/ctClass/testclasses/issue1306/internal/BooleanArrays.java
new file mode 100644
index 000000000..157d89a8b
--- /dev/null
+++ b/src/test/java/spoon/test/ctClass/testclasses/issue1306/internal/BooleanArrays.java
@@ -0,0 +1,28 @@
+package spoon.test.ctClass.testclasses.issue1306.internal;
+
+
+/**
+ * Reusable assertions for arrays of {@code boolean}s.
+ * 
+ * @author Alex Ruiz
+ * @author Joel Costigliola
+ * @author Mikhail Mazursky
+ * @author Nicolas Fran√ßois
+ */
+public class BooleanArrays {
+
+  private static final BooleanArrays INSTANCE = new BooleanArrays();
+
+  /**
+   * Returns the singleton instance of this class.
+   * 
+   * @return the singleton instance of this class.
+   */
+  public static BooleanArrays instance() {
+    return INSTANCE;
+  }
+
+  BooleanArrays() {
+  }
+
+}
diff --git a/src/test/java/spoon/test/ctClass/testclasses/issue1306/internal/BooleanArraysBaseTest.java b/src/test/java/spoon/test/ctClass/testclasses/issue1306/internal/BooleanArraysBaseTest.java
new file mode 100644
index 000000000..f4fa8b1ff
--- /dev/null
+++ b/src/test/java/spoon/test/ctClass/testclasses/issue1306/internal/BooleanArraysBaseTest.java
@@ -0,0 +1,14 @@
+package spoon.test.ctClass.testclasses.issue1306.internal;
+
+public class BooleanArraysBaseTest {
+
+  protected boolean[] actual;
+  protected BooleanArrays arrays;
+
+
+  public void setUp() {
+    actual = spoon.test.ctClass.testclasses.issue1306.test.BooleanArrays.arrayOf(true, false);
+    arrays = new BooleanArrays();
+  }
+
+}
\ No newline at end of file
diff --git a/src/test/java/spoon/test/ctClass/testclasses/issue1306/test/BooleanArrays.java b/src/test/java/spoon/test/ctClass/testclasses/issue1306/test/BooleanArrays.java
new file mode 100644
index 000000000..50af62c5a
--- /dev/null
+++ b/src/test/java/spoon/test/ctClass/testclasses/issue1306/test/BooleanArrays.java
@@ -0,0 +1,30 @@
+/**
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2017 the original author or authors.
+ */
+package spoon.test.ctClass.testclasses.issue1306.test;
+
+/**
+ * @author Alex Ruiz
+ */
+public final class BooleanArrays {
+  private static final boolean[] EMPTY = {};
+
+  public static boolean[] arrayOf(boolean... values) {
+    return values;
+  }
+
+  public static boolean[] emptyArray() {
+    return EMPTY;
+  }
+
+  private BooleanArrays() {}
+}
