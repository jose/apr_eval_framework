diff --git a/src/main/java/valuestreams/pipeline/Pipeline.java b/src/main/java/valuestreams/pipeline/Pipeline.java
index 94155080c..87f14a947 100644
--- a/src/main/java/valuestreams/pipeline/Pipeline.java
+++ b/src/main/java/valuestreams/pipeline/Pipeline.java
@@ -109,19 +109,23 @@ public class Pipeline<I, O> {
      */
     @SuppressWarnings({"rawtypes", "unchecked"})
     public Value<O> apply(I input) {
-        Object source = input;
-        Object target = null;
+        try {
+            Object source = input;
+            Object target = null;
 
-        for (Operation p : operations) {
-            target = p.apply(source);
-            source = target;
+            for (Operation p : operations) {
+                target = p.apply(source);
+                source = target;
 
-            if (source == null) {
-                break;
+                if (source == null) {
+                    break;
+                }
             }
-        }
 
-        return target != null ? Value.of((O) target) : Value.empty();
+            return target != null ? Value.of((O) target) : Value.empty();
+        } catch (Exception ex) {
+            return Value.empty();
+        }
     }
 
     public CompletableFuture<Value<O>> applyAsync(I input) {
diff --git a/src/test/java/PipelineTests.java b/src/test/java/PipelineTests.java
new file mode 100644
index 000000000..37ef5fcd6
--- /dev/null
+++ b/src/test/java/PipelineTests.java
@@ -0,0 +1,45 @@
+import org.junit.jupiter.api.Test;
+import valuestreams.Value;
+import valuestreams.pipeline.Pipeline;
+
+import java.io.IOException;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+public class PipelineTests {
+    @Test
+    void basicUsage() {
+        Pipeline<String, String> pipeline = Pipeline.input(String.class)
+                .map(Integer::valueOf)
+                .validate(i -> i > 10)
+                .map(Object::toString);
+
+        Value<String> success = pipeline.apply("12");
+        Value<String> failIntegerParse = pipeline.apply("a");
+        Value<String> failValidation = pipeline.apply("5");
+
+        assertTrue(success.isPresent());
+        assertEquals("12", success.getNullable());
+
+        assertFalse(failIntegerParse.isPresent());
+        assertFalse(failValidation.isPresent());
+    }
+
+    @Test
+    void extendingPipeline() {
+        Pipeline<String, Integer> base = Pipeline.input(String.class)
+                .map(Integer::valueOf)
+                .validate(i -> i > 1);
+
+        Pipeline<String, Integer> square = base.map(i -> i*i);
+        Pipeline<String, Integer> cube = base.map(i -> i*i*i);
+
+        Value<Integer> squared = square.apply("5");
+        Value<Integer> cubed = cube.apply("5");
+
+        assertTrue(squared.isPresent());
+        assertTrue(cubed.isPresent());
+
+        assertTrue(squared.getNullable().intValue() != cubed.getNullable().intValue());
+    }
+}
