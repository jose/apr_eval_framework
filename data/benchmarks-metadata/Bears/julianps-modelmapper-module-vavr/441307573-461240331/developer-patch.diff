diff --git a/src/main/java/com/github/julianps/modelmapper/ValueConverter.java b/src/main/java/com/github/julianps/modelmapper/ValueConverter.java
index fc59b7232..e33572aa3 100644
--- a/src/main/java/com/github/julianps/modelmapper/ValueConverter.java
+++ b/src/main/java/com/github/julianps/modelmapper/ValueConverter.java
@@ -1,36 +1,40 @@
 package com.github.julianps.modelmapper;
 
-import io.vavr.Value;
 import org.modelmapper.internal.typetools.TypeResolver;
 import org.modelmapper.spi.ConditionalConverter;
 import org.modelmapper.spi.MappingContext;
 import org.modelmapper.spi.PropertyInfo;
 
+import io.vavr.Value;
+
 /**
  * @author jstuecker
- *
+ * <p>
  * Implementation of a {@link ConditionalConverter} for {@link Value}
  */
 class ValueConverter implements ConditionalConverter<Value, Value> {
 
-    @Override
-    public MatchResult match(Class<?> sourceType, Class<?> destinationType) {
-        if (Value.class.isAssignableFrom(sourceType) &&
-                Value.class.isAssignableFrom(destinationType)) {
-            return MatchResult.FULL;
-        } else {
-            return MatchResult.NONE;
-        }
-    }
+	@Override
+	public MatchResult match(Class<?> sourceType, Class<?> destinationType) {
+		if (Value.class.isAssignableFrom(sourceType) &&
+				Value.class.isAssignableFrom(destinationType)) {
+			return MatchResult.FULL;
+		} else {
+			return MatchResult.NONE;
+		}
+	}
 
-    @Override
-    public Value convert(MappingContext<Value, Value> context) {
-        final Value<?> source = (Value<?>) context.getSource();
-        final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty();
-        final Class<?> destinationType = TypeResolver
-                .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType());
-        return source
-                .map(src -> context.create(src, destinationType))
-                .map(ctx -> context.getMappingEngine().map(ctx));
-    }
+	@Override
+	public Value convert(MappingContext<Value, Value> context) {
+		if (context == null || context.getSource() == null) {
+			return null;
+		}
+		final Value<?> source = (Value<?>) context.getSource();
+		final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty();
+		final Class<?> destinationType = TypeResolver
+				.resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType());
+		return source
+				.map(src -> context.create(src, destinationType))
+				.map(ctx -> context.getMappingEngine().map(ctx));
+	}
 }
diff --git a/src/test/java/com/github/julianps/modelmapper/StubFactory.java b/src/test/java/com/github/julianps/modelmapper/StubFactory.java
index 397130ee8..dfd555eef 100644
--- a/src/test/java/com/github/julianps/modelmapper/StubFactory.java
+++ b/src/test/java/com/github/julianps/modelmapper/StubFactory.java
@@ -3,123 +3,129 @@ package com.github.julianps.modelmapper;
 import io.vavr.collection.Array;
 import io.vavr.collection.HashSet;
 import io.vavr.collection.List;
-import io.vavr.collection.Set;
 import io.vavr.control.Option;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 
 public class StubFactory {
 
-    // source inner
-    @Data
-    static class Y {
-        Boolean status;
-    }
-
-    // dest inner
-    @Data
-    static class YInfo {
-        Boolean status;
-    }
-
-    // source wrapper
-    @Data
-    static class X {
-        Option<Y> y;
-    }
-
-    // dest wrapper
-    @Data
-    static class XInfo {
-        Option<YInfo> y;
-    }
-
-    @Data
-    static class Dest {
-        Integer x;
-    }
-
-
-    @Data
-    static class Source {
-        Integer x;
-    }
-
-
-    // Array ---
-    @Data
-    static class SourceArray {
-        Array<Source> array;
-    }
-
-    @Data
-    static class DestArray {
-        Array<Dest> array;
-    }
-
-    @Data
-    @EqualsAndHashCode(callSuper = true)
-    static class ExtendedDestArray extends DestArray {
-    }
-
-    // List ---
-    @Data
-    static class SourceList {
-        List<Source> list;
-    }
-
-    @Data
-    static class DestList {
-        List<Dest> list;
-    }
-
-    @Data
-    @EqualsAndHashCode(callSuper = true)
-    static class ExtendedDestList extends DestList {
-    }
-
-
-    // Set ---
-
-    @Data
-    static class SourceSet {
-       HashSet<Source> set;
-    }
-
-    @Data
-    static class DestSet {
-        HashSet<Dest> set;
-    }
-
-    @Data
-    @EqualsAndHashCode(callSuper = true)
-    static class ExtendedDestSet extends DestSet {
-    }
-
-
-    static SourceList stubSourceList() {
-        final SourceList sourceList = new SourceList();
-        sourceList.list = List.of(stubSource(2), stubSource(5));
-        return sourceList;
-    }
-
-    static SourceArray stubSourceArray() {
-        final SourceArray sourceArray = new SourceArray();
-        sourceArray.array = Array.of(stubSource(2), stubSource(5));
-        return sourceArray;
-    }
-
-    static SourceSet stubSourceSet() {
-        final SourceSet sourceList = new SourceSet();
-        sourceList.set = HashSet.of(stubSource(2), stubSource(5));
-        return sourceList;
-    }
-
-
-    static Source stubSource(int number) {
-        final Source source = new Source();
-        source.x = number;
-        return source;
-    }
+	// source inner
+	@Data
+	static class Y {
+		Boolean status;
+	}
+
+	// dest inner
+	@Data
+	static class YInfo {
+		Boolean status;
+	}
+
+	// source wrapper
+	@Data
+	static class X {
+		Option<Y> y;
+	}
+
+	// dest wrapper
+	@Data
+	static class XInfo {
+		Option<YInfo> y;
+	}
+
+	@Data
+	static class Dest {
+		Integer x;
+	}
+
+
+	@Data
+	static class Source {
+		Integer x;
+	}
+
+
+	// Array ---
+	@Data
+	static class SourceArray {
+		Array<Source> array;
+	}
+
+	@Data
+	static class DestArray {
+		Array<Dest> array;
+	}
+
+	@Data
+	@EqualsAndHashCode(callSuper = true)
+	static class ExtendedDestArray extends DestArray {
+	}
+
+	// List ---
+	@Data
+	static class SourceList {
+		List<Source> list;
+	}
+
+	@Data
+	static class DestList {
+		List<Dest> list;
+	}
+
+	@Data
+	@EqualsAndHashCode(callSuper = true)
+	static class ExtendedDestList extends DestList {
+	}
+
+
+	// Set ---
+
+	@Data
+	static class SourceSet {
+		HashSet<Source> set;
+	}
+
+	@Data
+	static class DestSet {
+		HashSet<Dest> set;
+	}
+
+	@Data
+	@EqualsAndHashCode(callSuper = true)
+	static class ExtendedDestSet extends DestSet {
+	}
+
+
+	static SourceList stubSourceList() {
+		final SourceList sourceList = new SourceList();
+		sourceList.list = List.of(stubSource(2), stubSource(5));
+		return sourceList;
+	}
+
+	static SourceList stubSourceListNull() {
+		final SourceList sourceList = new SourceList();
+		sourceList.list = null;
+		return sourceList;
+
+	}
+
+	static SourceArray stubSourceArray() {
+		final SourceArray sourceArray = new SourceArray();
+		sourceArray.array = Array.of(stubSource(2), stubSource(5));
+		return sourceArray;
+	}
+
+	static SourceSet stubSourceSet() {
+		final SourceSet sourceList = new SourceSet();
+		sourceList.set = HashSet.of(stubSource(2), stubSource(5));
+		return sourceList;
+	}
+
+
+	static Source stubSource(int number) {
+		final Source source = new Source();
+		source.x = number;
+		return source;
+	}
 }
 
diff --git a/src/test/java/com/github/julianps/modelmapper/ValueConverterTest.java b/src/test/java/com/github/julianps/modelmapper/ValueConverterTest.java
index 3948a9faf..debb334de 100644
--- a/src/test/java/com/github/julianps/modelmapper/ValueConverterTest.java
+++ b/src/test/java/com/github/julianps/modelmapper/ValueConverterTest.java
@@ -1,93 +1,113 @@
 package com.github.julianps.modelmapper;
 
-import io.vavr.control.Option;
+import static junit.framework.TestCase.assertTrue;
+import static org.assertj.core.api.Assertions.assertThat;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.modelmapper.ModelMapper;
 import org.modelmapper.convention.MatchingStrategies;
 
-import static junit.framework.TestCase.assertTrue;
-import static org.assertj.core.api.Assertions.assertThat;
+import io.vavr.control.Option;
 
 public class ValueConverterTest {
 
-    private ModelMapper modelMapper;
-
-    @Before
-    public void init() {
-        modelMapper = new ModelMapper();
-        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
-        modelMapper.registerModule(new VavrModule());
-    }
-
-    @Test
-    public void testOption() {
-        StubFactory.X x = new StubFactory.X();
-        StubFactory.Y y = new StubFactory.Y();
-        y.status = Boolean.TRUE;
-        x.y = Option.of(y);
-        StubFactory.XInfo xinfo = modelMapper.map(x, StubFactory.XInfo.class);
-        assertThat(xinfo).isNotNull();
-        assertThat(xinfo.y).isNotNull();
-        assertThat(xinfo.y.get().status).isEqualTo(Boolean.TRUE);
-        assertThat(xinfo.y.get()).isInstanceOf(StubFactory.YInfo.class);
-    }
-
-    @Test
-    public void testNormalList() {
-        final StubFactory.DestList destList = modelMapper.map(StubFactory.stubSourceList(), StubFactory.DestList.class);
-        checkListResult(destList);
-    }
-
-    @Test
-    public void testDerivedList() {
-        final StubFactory.DestList destList = modelMapper.map(StubFactory.stubSourceList(), StubFactory.ExtendedDestList.class);
-        checkListResult(destList);
-    }
-
-    private void checkListResult(StubFactory.DestList destList) {
-        assertThat(destList.list.get(1))
-                .isNotNull()
-                .isInstanceOf(StubFactory.Dest.class);
-        assertTrue(destList.list.get(1).x == 5);
-    }
-
-
-    @Test
-    public void testNormalArray() {
-        final StubFactory.DestArray destArray = modelMapper.map(StubFactory.stubSourceArray(), StubFactory.DestArray.class);
-        checkArrayResult(destArray);
-    }
-
-    @Test
-    public void testDerivedArray() {
-        StubFactory.ExtendedDestArray extendedDestArray = modelMapper.map(StubFactory.stubSourceArray(), StubFactory.ExtendedDestArray.class);
-        checkArrayResult(extendedDestArray);
-    }
-
-    private void checkArrayResult(final StubFactory.DestArray destArray) {
-        assertThat(destArray.array.get(1))
-                .isNotNull()
-                .isInstanceOf(StubFactory.Dest.class);
-        assertTrue(destArray.array.get(1).x == 5);
-    }
-
-    @Test
-    public void testNormalSet() {
-        final StubFactory.DestSet destSet = modelMapper.map(StubFactory.stubSourceSet(), StubFactory.DestSet.class);
-        checkSetResult(destSet);
-    }
-
-    @Test
-    public void testDerivedSet() {
-        StubFactory.ExtendedDestSet destSet = modelMapper.map(StubFactory.stubSourceSet(), StubFactory.ExtendedDestSet.class);
-        checkSetResult(destSet);
-    }
-
-    private void checkSetResult(final StubFactory.DestSet destSet) {
-        assertThat(destSet.set.head())
-                .isNotNull()
-                .isInstanceOf(StubFactory.Dest.class);
-        assertTrue(destSet.set.head().x == 5);
-    }
+	private ModelMapper modelMapper;
+
+	@Before
+	public void init() {
+		modelMapper = new ModelMapper();
+		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
+		modelMapper.registerModule(new VavrModule());
+	}
+
+	@Test
+	public void testOption() {
+		StubFactory.X x = new StubFactory.X();
+		StubFactory.Y y = new StubFactory.Y();
+		y.status = Boolean.TRUE;
+		x.y = Option.of(y);
+		StubFactory.XInfo xinfo = modelMapper.map(x, StubFactory.XInfo.class);
+		assertThat(xinfo).isNotNull();
+		assertThat(xinfo.y).isNotNull();
+		assertThat(xinfo.y.get().status).isEqualTo(Boolean.TRUE);
+		assertThat(xinfo.y.get()).isInstanceOf(StubFactory.YInfo.class);
+	}
+
+	@Test
+	public void testOptionNull() {
+		StubFactory.X x = new StubFactory.X();
+		StubFactory.Y y = new StubFactory.Y();
+		y.status = null;
+		x.y = Option.of(y);
+		StubFactory.XInfo xinfo = modelMapper.map(x, StubFactory.XInfo.class);
+		assertThat(xinfo).isNotNull();
+		assertThat(xinfo.y).isNotNull();
+		assertThat(xinfo.y.get().status).isNull();
+	}
+
+	@Test
+	public void testNormalList() {
+		final StubFactory.DestList destList = modelMapper.map(StubFactory.stubSourceList(), StubFactory.DestList.class);
+		checkListResult(destList);
+	}
+
+	@Test
+	public void testNormalListNull() {
+		final StubFactory.DestList destList = modelMapper.map(StubFactory.stubSourceListNull(), StubFactory.DestList.class);
+		assertThat(destList).isNotNull();
+		assertThat(destList.list).isNull();
+	}
+
+	@Test
+	public void testDerivedList() {
+		final StubFactory.DestList destList = modelMapper.map(StubFactory.stubSourceList(), StubFactory.ExtendedDestList.class);
+		checkListResult(destList);
+	}
+
+	private void checkListResult(StubFactory.DestList destList) {
+		assertThat(destList.list.get(1))
+				.isNotNull()
+				.isInstanceOf(StubFactory.Dest.class);
+		assertTrue(destList.list.get(1).x == 5);
+	}
+
+
+	@Test
+	public void testNormalArray() {
+		final StubFactory.DestArray destArray = modelMapper.map(StubFactory.stubSourceArray(), StubFactory.DestArray.class);
+		checkArrayResult(destArray);
+	}
+
+	@Test
+	public void testDerivedArray() {
+		StubFactory.ExtendedDestArray extendedDestArray = modelMapper.map(StubFactory.stubSourceArray(), StubFactory.ExtendedDestArray.class);
+		checkArrayResult(extendedDestArray);
+	}
+
+	private void checkArrayResult(final StubFactory.DestArray destArray) {
+		assertThat(destArray.array.get(1))
+				.isNotNull()
+				.isInstanceOf(StubFactory.Dest.class);
+		assertTrue(destArray.array.get(1).x == 5);
+	}
+
+	@Test
+	public void testNormalSet() {
+		final StubFactory.DestSet destSet = modelMapper.map(StubFactory.stubSourceSet(), StubFactory.DestSet.class);
+		checkSetResult(destSet);
+	}
+
+	@Test
+	public void testDerivedSet() {
+		StubFactory.ExtendedDestSet destSet = modelMapper.map(StubFactory.stubSourceSet(), StubFactory.ExtendedDestSet.class);
+		checkSetResult(destSet);
+	}
+
+	private void checkSetResult(final StubFactory.DestSet destSet) {
+		assertThat(destSet.set.head())
+				.isNotNull()
+				.isInstanceOf(StubFactory.Dest.class);
+		assertTrue(destSet.set.head().x == 5);
+	}
 }
