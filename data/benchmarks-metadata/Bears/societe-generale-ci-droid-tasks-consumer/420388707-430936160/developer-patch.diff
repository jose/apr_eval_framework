diff --git a/ci-droid-tasks-consumer-services/src/main/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformService.java b/ci-droid-tasks-consumer-services/src/main/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformService.java
index ca05835b1..b30a61c76 100644
--- a/ci-droid-tasks-consumer-services/src/main/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformService.java
+++ b/ci-droid-tasks-consumer-services/src/main/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformService.java
@@ -115,9 +115,11 @@ public class ActionToPerformService {
             if (existingResourceExists(existingResourceContent)) {
                 decodedOriginalContent = GitHubContentBase64codec.decode(existingResourceContent.getBase64EncodedContent());
                 newContent = actionToReplicate.provideContent(decodedOriginalContent);
-            } else if (actionToReplicate.canContinueIfResourceDoesntExist()) {
+            }
+            else if (actionToReplicate.canContinueIfResourceDoesntExist()) {
                 newContent = actionToReplicate.provideContent(null);
-            } else {
+            }
+            else {
                 //existing resource doesnt exist and we should not continue
 
                 log.info("{} NOT updated on repo {}, on branch {}, as it doesnt exist", resourceToUpdate.getFilePathOnRepo(),
@@ -203,7 +205,12 @@ public class ActionToPerformService {
         PullRequestToCreate newPr = new PullRequestToCreate();
         newPr.setHead(branchName);
         newPr.setBase(impactedRepo.getDefaultBranch());
-        newPr.setTitle(action.getCommitMessage());
+
+        PullRequestGitHubInteraction pullRequestGitHubInteraction=(PullRequestGitHubInteraction)action.getGitHubInteraction();
+
+        String providedPrTitle=pullRequestGitHubInteraction.getPullRequestTitle();
+
+        newPr.setTitle(providedPrTitle!=null ? providedPrTitle : branchName);
         newPr.setBody("performed on behalf of " + action.getGitLogin() + " by CI-droid\n\n" + action.getCommitMessage());
 
         try{
diff --git a/ci-droid-tasks-consumer-services/src/test/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformServiceTest.java b/ci-droid-tasks-consumer-services/src/test/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformServiceTest.java
index 8614e08e6..3773ca5d7 100644
--- a/ci-droid-tasks-consumer-services/src/test/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformServiceTest.java
+++ b/ci-droid-tasks-consumer-services/src/test/java/com/societegenerale/cidroid/tasks/consumer/services/ActionToPerformServiceTest.java
@@ -227,7 +227,7 @@ public class ActionToPerformServiceTest {
     }
 
     @Test
-    public void continueIfExistingResourceisNull_whenActionPermitsIt() throws GitHubAuthorizationException {
+    public void continueIfExistingResourceIsNull_whenActionPermitsIt() throws GitHubAuthorizationException {
 
         BulkActionToPerform bulkActionToPerform = bulkActionToPerformBuilder.gitHubInteraction(new DirectPushGitHubInteraction()).build();
 
@@ -370,18 +370,53 @@ public class ActionToPerformServiceTest {
         assertThat(updatedResourceCaptor.getValue().getUpdateStatus()).isEqualTo(UPDATE_KO_AUTHENTICATION_ISSUE);
     }
 
+    @Test
+    public void shouldCreatePRwithProvidedTitle() throws GitHubAuthorizationException, BranchAlreadyExistsException {
+
+        mockPullRequestSpecificBehavior();
+        when(mockRemoteGitHub.createPullRequest(eq(REPO_FULL_NAME), any(PullRequestToCreate.class), anyString())).thenReturn(fakePullRequest);
+
+        BulkActionToPerform bulkActionToPerform = bulkActionToPerformBuilder.gitHubInteraction(new PullRequestGitHubInteraction(branchNameToCreateForPR,"new feature branch")).build();
+
+        actionToPerformService.perform(bulkActionToPerform);
+
+        verify(mockRemoteGitHub, times(1)).createPullRequest(eq(REPO_FULL_NAME),
+                newPrCaptor.capture(),
+                eq(SOME_OAUTH_TOKEN));
+
+        assertThat(newPrCaptor.getValue().getTitle()).isEqualTo("new feature branch");
+    }
+
+    @Test
+    public void shouldCreatePRwithBranchName_whenPRtitleIsNotProvided() throws GitHubAuthorizationException, BranchAlreadyExistsException {
+
+        mockPullRequestSpecificBehavior();
+        when(mockRemoteGitHub.createPullRequest(eq(REPO_FULL_NAME), any(PullRequestToCreate.class), anyString())).thenReturn(fakePullRequest);
+
+        BulkActionToPerform bulkActionToPerform = bulkActionToPerformBuilder.gitHubInteraction(new PullRequestGitHubInteraction(branchNameToCreateForPR,null)).build();
+
+        actionToPerformService.perform(bulkActionToPerform);
+
+        verify(mockRemoteGitHub, times(1)).createPullRequest(eq(REPO_FULL_NAME),
+                newPrCaptor.capture(),
+                eq(SOME_OAUTH_TOKEN));
+
+        assertThat(newPrCaptor.getValue().getTitle()).isEqualTo(branchNameToCreateForPR);
+
+    }
+
     private BulkActionToPerform doApullRequestAction() throws BranchAlreadyExistsException, GitHubAuthorizationException {
 
         mockPullRequestSpecificBehavior();
 
-        return bulkActionToPerformBuilder.gitHubInteraction(new PullRequestGitHubInteraction(branchNameToCreateForPR)).build();
+        return bulkActionToPerformBuilder.gitHubInteraction(new PullRequestGitHubInteraction(branchNameToCreateForPR,null)).build();
     }
 
     private void assertPullRequestHasBeenCreated(String expectedCommitMessage) {
         PullRequestToCreate actualPrToCreate = newPrCaptor.getValue();
         assertThat(actualPrToCreate.getBase()).isEqualTo("masterBranch");
         assertThat(actualPrToCreate.getHead()).isEqualTo(branchNameToCreateForPR);
-        assertThat(actualPrToCreate.getTitle()).isEqualTo(expectedCommitMessage);
+        assertThat(actualPrToCreate.getTitle()).isEqualTo(branchNameToCreateForPR);
 
         assertThat(actualPrToCreate.getBody()).startsWith("performed on behalf of someUserName by CI-droid");
         assertThat(actualPrToCreate.getBody()).endsWith(expectedCommitMessage);
